//混编 C 语言
import golang;
var go = golang();//创建 Go 编译器（ 仅仅调用编译后的 DLL 不需要 ）

//Go 与 aardio 一样，源码与字符串默认为 UTF-8 编码
go.main = /**********
package main

/*
#include <stdio.h>
#include <stdlib.h>
void c_print(char *str) {
    printf("%s\n", str);
}
*/
//#cgo LDFLAGS: -Wl,--allow-multiple-definition
import "C" //这句表示启用 cgo，这句前面的注释会作为 C 语言代码编译,上面的 #cgo 指令用来解决重复定义报错
import "unsafe"

//export getCString
func getCString() *C.char{
 	s := "Hello!" //这是 Go 字符串
 	cs := C.CString(s)//转为 C 语言字符串指针
 	C.c_print(cs)//调用 C 函数
 	return cs; 
}

//export freeCString
func freeCString(p unsafe.Pointer) {
 	C.free(p)//释放 C语言 字符串指针
}
 
//入口函数没有也要写个空的,实际不执行
func main() {} 
**********/

//上面的 go.main 会自动保存到文件，然后编译 Go 源码生成同名 DLL 文件
go.buildShared("/.go/cgo.go");

//------------------下面调用 DLL-----------------------

//加载 Go 编译的DLL，注意要指定 cdecl 调用约定
var dll = raw.loadDll("/.go/cgo.dll",,"cdecl");
 
//直接调用 Go 函数，函数名后加了大写尾标 P 用于声明返回值为指针类型。
var ptr = dll.getCStringP();

//C 指针转为 aardio 字符串,都是 UTF-8 直接转很方便。
var str = raw.str(ptr);
 
//已经不需要 C 指针了，调用 Go 函数释放
dll.freeCString(ptr);
 
import console;
console.log(str);
console.pause();


/*
aardio，C 语言，cgo，Go 类型对应关系如下：

aardio | C 语言                 | cgo         | Go 
BYTE   | char                   | C.char      | byte
byte   | singed char            | C.schar     | int8
BYTE   | unsigned char          | C.uchar     | uint8
word   | short                  | C.short     | int16
WORD   | unsigned short         | C.ushort    | uint16
int    | int                    | C.int       | int32 
INT    | unsigned int           | C.uint      | uint32
int    | long                   | C.long      | int32
INT    | unsigned long          | C.ulong     | uint32
long   | long long int          | C.longlong  | int64
LONG   | unsigned long long int | C.ulonglong | uint64
float  | float                  | C.float     | float32
double | double                 | C.double    | float64
INT    | size_t                 | C.size_t    | uint
pointer| void *                 |             | unsafe.Pointer

上面的 aardio 类型指的是『静态类型』，参考: chm://libraries/kernel/raw/datatype.html
aardio 中的数值类型以小写表示有符号，大写表示无符号。
Go 中的 uintptr 也可以表示指针（pointer）。
*/