//数组
import console;
import dotNet; 
var compiler = dotNet.createCompiler("C#");
compiler.Source = /***
namespace CSharpLibrary  
{   
    public class Object  
    {      
        public int num = 123;
        
 		public static object TestSafeArray(double [] arr)
   		{
       		 return arr;
   		}
   		
   		public static object TestObjectArray(CSharpLibrary.Object [] arr)
   		{
       		 return arr;
   		}
    }   
} 
***/
 
compiler.import("CSharpLibrary"); 

/*
1、基本纯值类型兼容的 .NET 数组、多维数组在 aardio 中
存为 com.SafeArray 数组。COM 数组与普通 aardio 数组操作完全相同。

2、交错数组在 aardio 中被封包为 DispatchableObject 对象并存为 dotNet.object 对象。

3、其他 .NET 类型数组由 aardio 自转换为 .NET 类型化数组。
并存为 dotNet.object 对象。

存为 dotNet.object 的数组支持：
1）可用 Length 属性获取数组长度。
2）可用 1 起始的下标访问数组成员。
3）支持 dotNet.each 遍历数组成员。
4）可用 table.parseValue 展开。
*/

//基本纯值类型兼容的 .NET 数组、多维数组可以直接交换
var safeArray = CSharpLibrary.Object.TestSafeArray({1,2,3});
console.dump(safeArray); //会转换为 aardio 数组兼容的 com.SafeArray

//创建 .NET 类型化数组，参数类型正确匹配，不会报错。
var objArray = dotNet.createArray( CSharpLibrary.Object, 2 )
objArray[1] = CSharpLibrary.Object(); //默认数组是空的
objArray[2] = CSharpLibrary.Object(); 

//下面这样写也可以
var objArray = dotNet.createArray( { CSharpLibrary.Object(),CSharpLibrary.Object() }  )

//下面这样写也可以，aardio 会自动转换为类型化数组。
var objArray = { CSharpLibrary.Object(),CSharpLibrary.Object() } 

//.NET数组取长度要用 Length 属性而不是#。
console.log("数组长度",objArray.Length)

//访问数组的第 1 个元素（ aardio 中起始下标为 1 ）
console.log(objArray[1].num)

//遍历 .NET 数组
for i,v in dotNet.each(objArray) {
	console.log(i,v)
}

console.pause();