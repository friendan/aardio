//执行 Python 代码
import console;
console.log("必须在导入 py2 扩展库以前打开控制台,
才能查看 Python 在控制台输出的内容与错误信息。py3 系列控制库无此限制。");

import py2; 
py2.main.testData = '可以这样预先指定 Python 全局变量'u; 
//Python2 对 UTF-8 不友好，所以上面用 Uniocde(UTF-16) 字符串。
 
//Python 代码，注意 Python 使用空格有严格的规则，乱按空格报错不是 bug。 
var pyCode = /**
def sign_request():
    from hashlib import sha1
    import hmac
    import binascii
    key = "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
    raw = "Hi There" # as specified by oauth
    hashed = hmac.new(key.encode("gbk"), testData.encode("utf-8"), sha1)
    return binascii.b2a_base64(hashed.digest())[:-1].decode("gbk")
    
def permutations(items,r): 
    from itertools import permutations
    return list(permutations(items,r))
**/

/*
执行 Python2 的代码，
如果下面的参数 pyCode 为类似"/res/py.aardio"这样的 aardio 代码路径，
则支持 aardio 模板语法： chm://the%20language/template_syntax.html
*/
py2.exec( pyCode ) 

 
/*
执行 aardio 工程中的内嵌资源文件可以这样写: 
py2.exec("/res/test.py") 

也可以用导入模块的方式,例如导入 /py/pyMain.py 文件
py2.import("pyMain")
*/

//调用Python2 __main__ 模块下的函数。
console.log( py2.main.sign_request() )

//下面用纯 aardio 计算 HMAC-SHA1。
//用 aardio 计算 HMAC-SHA1 
import crypt.hmac 
var key = '\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b';
var wstr  = py2.main.testData.toString();
var hmacData = crypt.hmac.sha1(key,string.fromUnicode(wstr)).getValue();  
console.log( crypt.encodeBin( hmacData ) ) 

//从 py2.main 模块获取并调用 Python 代码定义的函数 
var pyList = py2.main.permutations(
	{"a","b","c"},
	//aardio 数值默认为浮点数, 可使用 py2.int() 生成 Python 整数
	py2.int(2) 
);

/*
所有 Python 返回的对象（pyObject）在aardio 中都基于 py2.object 构建,
pyObject 用 parseValue() 可转换为纯 aardio 对象。
*/
console.dump( pyList.parseValue() );

//也可以如下遍历 pyObject 对象。
for( pyItem in pyList.each() ){
	console.log( tostring(pyItem) ) //pyObject也支持 tostring(),tonumber() 这此些函数
}

console.pause();