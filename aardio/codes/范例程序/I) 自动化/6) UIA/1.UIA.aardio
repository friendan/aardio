//UIAutomationClient
//此功能调用 .NET 组件，相关范例：调用其他语言 > dotNet
//探测工具 loadcodex("~\tools\6) 探测器\2.inspect.aardio")

//运行程序
import process; 
var prcs = process.shell("wordpad.exe",io.getSpecial(0x25/*_CSIDL_SYSTEM*/,"drivers\etc\HOSTS"));

//等待主窗口
prcs.waitMainWindow("WordPadClass");
 
//导入 .NET 类  
//https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.automation?view=netframework-4.6
import System.Windows.Automation;
//改为 import System.Windows.Automation.3 可支持 TextPattern2 等接口，下面的代码不必更改。

//访问 .NET 类的静态成员
Automation = System.Windows.Automation;
PropertyCondition = Automation.PropertyCondition;
AutomationElement = Automation.AutomationElement;
TreeScope = Automation.TreeScope; 

//合并查询条件，在 C# 里因为 params 语法糖可以写为多个参数，但参数实际就是一个数组
var condWordpad = Automation.AndCondition({
	//指定写字板窗口的类名
	 PropertyCondition(AutomationElement.ClassNameProperty,"WordPadClass"),
	 //指定写字板窗口的窗口类型
	 PropertyCondition(AutomationElement.ControlTypeProperty,Automation.ControlType.Window)
})  

//查找写字板窗口
var wordpad = AutomationElement.RootElement.FindFirst(TreeScope.Descendants, condWordpad) 
if(!wordpad){
	error("未发现目标窗口");
} 

//合并查询条件，在 C# 里因为 params 语法糖可以写为多个参数，但参数实际就是一个数组
var condEdit = Automation.OrCondition({
	//写字板的编辑框的类名
	PropertyCondition(AutomationElement.ClassNameProperty,"RICHEDIT50W"),
	//假设文本框可能使用其他类名
	PropertyCondition(AutomationElement.ClassNameProperty,"Edit") 
})

//查找写字板的编辑框 
var editBox = wordpad.FindFirst( TreeScope.Descendants, condEdit); 
var hwnd = editBox.Current.NativeWindowHandle;//窗口句柄

//获取写字板内的文本 
//https://learn.microsoft.com/en-us/dotnet/api/system.windows.automation.textpattern?view=netframework-4.0
var textPattern;
try {
	//获取 Pattern 失败会抛出异常
	textPattern = editBox.GetCurrentPattern(Automation.TextPattern.Pattern);
}

import win.dlg.message;
if(textPattern){
	var text = textPattern.DocumentRange.GetText(50);
	win.dlg.message().info(text + " ……");
}	
else{
	return win.dlg.message().info("写字板文本框句柄：" + hwnd)	
}