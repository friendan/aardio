//入门
import console;
console.showLoading(" 正在连接服务器")

import web.rest.jsonLiteClient;

/*
创建 HTTP( REST ) 客户端。
请求为网页表单编码，响应数据直接返回，使用 web.rest.client
请求为网页表单编码，响应数据为 JSON，使用 web.rest.jsonLiteClient
请求与响应数据都是 JSON，使用 web.rest.jsonClient

web.rest 入门教程：
https://mp.weixin.qq.com/s/4mYRDnO49alwpQoBD_cILg
*/
var http = web.rest.jsonLiteClient();

//声明 HTTP 接口对象
var api = http.api("http://httpbin.org/anything/")

/*
调用 HTTP 接口函数（已经自动转换为了本地函数）。
返回 JSON 自动转换为了 aardio 对象。
*/ 
var ret = api.object.method({
    name = "用户名";
    data = "其他数据";
});

/*
上面的函数自动做了几件事：

1、将 api.object.method 的请求网址自动转换为
"http://httpbin.org/anything/object/method"
HTTP 接口对象的每个下级成员名都追加在网址尾部

2、将函数参数按表单编码转换为字符串提交。

3、解析服务器返回的 JSON ，并作为函数返回值返回。
*/

//发送 GET 请求
var ret = api.name.get( a = 1,b = 2);

//发送 POST 请求
//var ret = api.name.post( a = 1,b = 2);

//发送 PATCH 请求
//var ret = api.name.patch( a = 1,b = 2);

//发送 PUT 请求
//var ret = api.name.put( a = 1,b = 2);

//发送 DELETE 请求
//var ret,err = api.name.delete( a = 1,b = 2);

//第一个返回值可转换为逻辑真表示 API 调用成功
if(ret){
	//输出服务端返回对象 —— 这个接口返回的是 HTTP 请求信息 
	console.dumpJson(ret);
}
else {
	//err 为错误信息（字符串）
	console.log(err) //可能为本地错误，也可能是服务器应答的错误信息
	
	/*
	返回服务器应答的错误对象，如果也是此客户端可解析的响应格式（这里指 JSON ）则解析并返回解析结果。
	如果发生了其他错误，服务器并未应答则返回 null 。
	如果请求成功则返回 null 。
	*/
	var errObject = http.lastResponseError();
	
	//也要吧指定要返回的字段，如果找不到返回 null ，不会抛出异常
	var errorMessage = http.lastResponseError("error");
}

console.pause();