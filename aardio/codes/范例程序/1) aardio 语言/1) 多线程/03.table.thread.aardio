//线程共享变量
import console.int;
import thread.table;

//线程都独享全局变量环境，下面创建一个多线程共享变量。
var thrdVar = thread.var();
thread.invokeAndWait(
	function(thrdVar){
		
		//修改线程共享变量的值
		thrdVar.set(123456);
		
	},thrdVar//线程变量可以传入其他线程使用
)

//获取线程共享变量的值
console.log(thrdVar.get());

//及时释放不再使用的线程共享变量
thrdVar.release();

//thread.table 则是创建了一个线程间共享的 table 对象， 
var thrdTable = thread.table()

var thrdHandle1 = thread.create(
	function(thrdTable){ 
		      
	thrdTable.push( "线程ID:" + thread.getId() )
	
	thrdTable.a = 12; //线程共享表也可以象普通表一样访问
	thrdTable.b = 34;
	thrdTable.c = 56; 
	thrdTable.d = {}; 
	
	//这种写法是错的，因为线程共享表每次读成员都会复制新的副本。 
	thrdTable.d.tab = { name = "name" }
	
	//正确写法，先读取表到本地
	var localData = thrdTable.d;
	
	//作为普通表轻快简单地操作
	localData.tab = { name = "name" }
	
	//然后再保存到线程共享表
	thrdTable.d = localData;
		
	//线程共享表可作为参数传入其他线程
	},thrdTable
)

//等待线程执行完,并关闭所有线程句柄
thread.waitClose(thrdHandle1) 

//读取线程表的成员
console.log( thrdTable.pop(2) )

//读取线程表的成员
console.log( thrdTable.a ); 

//遍历共享表
for( k,v in thrdTable.each() ){ 
	console.dump(k,v);
}

//不使用的线程共享表应及时释放。
thrdTable.release();