import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio + Python";right=759;bottom=469;parent=...)
winform.add()
/*}}*/

import web.form;
var wb = web.form( winform );
wb.noScriptErr = true;

wb.html = /** 
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />  
    <title>Python</title> 
	<style>body { font-family: "Segoe UI", sans-serif;  }</style>
	<script>
	
	window.pythonVersion = "py3"
	onClickVersion = function(radio){
		document.getElementById("py3").style.display = "none";
		document.getElementById("process").style.display = "none";
		document.getElementById("py2").style.display = "none";
		document.getElementById(radio.value).style.display = "";
		window.pythonVersion = radio.value;
	}
	
	</script>
</head>
<body style="white-space:pre;font-size:13pt;word-wrap: break-word;word-break: normal;overflow:hidden">
<span style="font-size:12pt;">请选择 Python 环境：</span><label><input type="radio" name="version" value="py3" checked onclick="onClickVersion(this)">Python 3</label> <label><input type="radio" name="version" value="py2" onclick="onClickVersion(this)">Python 2.7</label> <label><input type="radio" name="version" value="process" onclick="onClickVersion(this)">任意版本（64位/32位）</label>
<span id="py3" style="font-size:12pt;">
进程内调用 32 位 Python 环境，发布时可 <a href="https://mp.weixin.qq.com/s/UAXYpMSFm37RowitRYo12Q">一键「转换为独立 EXE 程序」</a>。

支持用 <a href="https://mp.weixin.qq.com/s/s9vcYQ4v4HYDIfG1FolDeA">py3.pip 按需安装第三方 Python 模块</a>，生成 EXE 体积小。
用户电脑不需要再安装 Python ，完全独立，不会被系统安装的 Python 环境干扰。

aardio 与 Python 可以非常 <a href="https://mp.weixin.qq.com/s/1fCiw9r-H_HqgpMBsE7I0Q"> 方便地相互调用库和函数</a> 。
在 aardio 中可使用 py3.import("模块名称") 导入 Python 模块。

也可以在 aardio 中导入在 py3.export 名字空间下建立的用户库，
这些库都可以在 Python 中作为模块使用 import 语句导入。
 
Python 与 aardio 混合编程范例目录：
<span style="color:green">aardio 范例 &gt; 调用其他语言 &gt; Python 语言 &gt; Python 3.x</span> 

</span><span id="py2" style="font-size:12pt;display:none">
进程内调用 32 位 Python 环境，发布时可 <a href="https://mp.weixin.qq.com/s/UAXYpMSFm37RowitRYo12Q"> 一键「转换为独立 EXE 程序」</a>

请参考 <span style="color:green">aardio 范例 &gt; 调用其他语言 &gt; Python 语言 &gt; Python 2.x &gt; 安装模块</span>，
按需添加模块，生成 EXE 体积小。用户电脑不需要再安装 Python ，
完全独立，不会被系统安装的 Python 环境干扰。

aardio 与 Python 可以非常方便地相互调用库和函数。
在 aardio 中可使用 py2.import("模块名称") 导入 Python 模块。

也可以在 aardio 中导入在 py2.export 名字空间下建立的用户库，
这些库都可以在 Python 中作为模块使用 import 语句导入。
 
Python 与 aardio 混合编程范例目录：
<span style="color:green">aardio 范例 &gt; 调用其他语言 &gt; Python 语言 &gt; Python 2.x</span> 
</span><span id="process" style="font-size:10.5pt;display:none">
进程外调用 64 位或 32 位 Python 环境，
使用 32 位 Python 可 <a href="https://mp.weixin.qq.com/s/UAXYpMSFm37RowitRYo12Q">生成独立 EXE</a> ，64 位 Python 不支持生成独立 EXE。

软件可自带绿色 Python 环境，可指定版本 。
如果不带 Python 环境，aardio 也可以在运行时自动下载所需 Python 环境。
完全独立，不会被系统安装的 Python 环境干扰，用户电脑不需要再安装 Python 。

如果指定 <span style="color:green">process.python.path = "python.exe"</span> 则调用系统安装的 Python。
如果系统未安装 Python 会自动下载安装，可用 <span style="color:green">process.python.version</span> 指定下载版本。

aardio 与 Python 可以通过进程管道或者 JSON-RPC 等方便地交互。
 
请参考以下范例：
<span style="color:green">aardio 范例 &gt; 调用其他语言 &gt; Python 语言 &gt; Python 任意版本
aardio 范例 &gt; 进程 &gt; 管道</span>
</span> 
 
**/
winform.setTimeout( 
	function(){
		wb.html = wb.html;	
	},10
);	

wb.BeforeNavigate2 = function( pDisp, url, flags, targetFrame, postData, headers, cancel ) { 
	import process;
	process.openUrl(url);
	return url, flags, targetFrame, postData, headers, true;
}

winform.getTemplatePath = function(){
	return io.fullpath("/template/python/" + wb.eval("window.pythonVersion")) 
}

winform.show(true);
win.loopMessage();
return winform;