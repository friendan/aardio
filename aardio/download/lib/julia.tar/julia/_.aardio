import julia.lib;
import julia.value;
import julia.module;
import raw.struct;

namespace julia

typeof = value.typeof;

exceptionOccurred = function(){
	var e = ::LibJulia.jl_exception_occurredP();
	if(e){ 
		return e,typeof(e);
	}
}

lasterr = function(){
	if(::LibJulia.jl_exception_occurredP()){
		var p = self.eval("sprint(showerror, ccall(:jl_exception_occurred, Any, ()))");
		return value.parse(p);
	}
}

self.error = function(str,...){
	if(...){str = ..string.format(str,...) }
	
	return ::LibJulia.jl_error(str);
}

self.eval = function(code,...){
	if(...) code = ..string.format(code,...);
	var r = ::LibJulia.jl_eval_stringP(code); 
	return value.parse( r );
}

self.evalJson = function(code,...){
	if(...) code = ..string.format(code,...);
	var r = ::LibJulia.jl_eval_stringP(code); 
	var s = value.parse( r );
	if(type.isString(s)){
		return ..web.json.tryParse(s);
	}
}

self.evalStruct = function(code,struct){
	var p = self.eval(code);
	if(type(p)=="pointer"){
		return ..raw.struct(struct,p);
	}
} 

self.evalRaw = function(code,...){
	if(...) code = ..string.format(code,...);
	return ::LibJulia.jl_eval_stringP(code);
}

self.using = function(name){
	if(self[[name]]){return self[[name]]; }
	self[[name]] = module(name,"using");
	return self[[name]];
}

self.import = function(name){
	if(self[[name]]){return self[[name]]; }
	self[[name]] = module(name,"import");
	return self[[name]];
}

self.Main = module.Main;
self.Core = module.Core;
self.Base = module.Base;
 
if(!self.Main){
	error("初始化 Main 模块失败");
}

self@ ={
	_get = function(k,ownerCall){ 
		return Main[k];
	}
} 

appendLoadPath = function(path,...){
	if(path!=".") path = ..io.exist(path)
	if( path ){ self["push!"](self.eval("LOAD_PATH"),path) }
	if(!...) return;
	appendPath(...);
}
 
appendLoadPath( ..io.fullpath("\") );

binDir = ..string.getenv("JULIA_BINDIR");

/**intellisense()
julia = Julia 语言扩展库。\n可在导入此扩展库以前用 string.setenv 设置以下环境变量： \nJULIA_VERSION 指定 Julia 版本，默认为 1.9.4。\b支持 1.6 ~1.9。暂不支持 1.10 及之后版本。\nJULIA_PROJECT 指定工程目录。\n如果指定的工程目录为无效路径，则默认设为 aardio 应用程序根目录 "/"\n\n在导入 julia 扩展库前打开控制台\njulia 代码才能在控制台输出内容
end intellisense**/

/**intellisense(julia)
appendLoadPath(.(->->->) = 添加一个或多个查找模块的目录到 LOAD_PATH
exceptionOccurred() = 如果有错误发生,\n返回错误对象指针,以及错误对象类型字符串
lasterr() = 如果有错误发生，返回错误信息文本
typeof(__) = 返回 Julia 对象指针的数据类型,返回值为字符串,\n参数@2为true是返回类型对象的原始指针而不会返回字符串,\n如果传入参数不是指针，返回 null
eval(.(code,->->->) = 执行 Julia 代码,\n尝试将返回值转为 aardio 对象,\n如果有多个参数，将首先使用这些参数调用 string.format 格式化代码
evalRaw(.(code,->->->) = 执行 Julia 代码,\n返回 Julia 对象的原始指针,\n如果有多个参数，将首先使用这些参数调用 string.format 格式化代码
using(__) = 使用 using 语句导入 Julia 模块到 julia 名字空间，\n此函数返回模块对象。
import(__) = 使用 import 语句导入 Julia 模块到 julia 名字空间，n此函数返回模块对象。
binDir = Julia 执行文件所在目录
evalStruct( = 执行返回结构体的 Julia 代码，返回 raw.struct 对象
evalStruct(.(code,struct) = 参数 @1 指定行返回结构体的 Julia 代码。\nJulia 返回值并不会添加引用计数，最好写个全局变量赋值语句以避免被回收。\n参数 @2 指定 aardio 定义的结构体类或结构体对象。\n返回 raw.struct 对象。\n\n返回的结构体共享 Julia 结构体内存。\n读写结构体成员会直接更新 Julia 的结构体\n可以调用返回对象的 get 或 set 函数一次性读写多个字段以优化性能
module.Main = Main 是 Julia 主模块。\n代码默认在此模块下运行\n!juliaModule.
Core = Core 模块\n!juliaModule.
Base = Base 模块\n!juliaModule.
? = 访问 Julia 的 Main 模块下的成员。\n 输入 Main 模块的全局变量名或者函数名。\n可以直接调用模块下的函数
end intellisense**/

/**details(说明，点这里展开)
在导入 julia 扩展库前打开控制台，
julia 代码才能在控制台输出内容
end details**/
