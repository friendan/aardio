import mymod { ImpNode }

fn foobar_mymod<U>(inode ImpNode<U>) ImpNode<U> {
	return ImpNode{}
}

fn simple<T>() T {
	return T{}
}

struct Foo {}

fn (_ Foo) simple<T>() T {
	return T{}
}

struct NonGenericStruct {}

fn use_as_generic(ngs NonGenericStruct<V>) NonGenericStruct<V> {
	return NonGenericStruct{}
}

struct GenericStruct<A, B> {}

fn proper_generics(gs GenericStruct<A, B>) GenericStruct<A, B> {
	return gs
}

fn main() {
	simple<int>()
	Foo{}.simple<int>()
}
