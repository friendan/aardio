import dotNet;

if(!( _WIN10_LATER || (_WIN_VER_MAJOR==6 && _WIN_VER_MINOR >= 2) ) ){
	import  System.Windows.Automation;
	System.Windows.Automation[["GetCaret"]] = function(){};
	System.Windows.Automation[["3"]] = System.Windows.Automation;
	return;
}

import dotNet;

//合并了 UIAComWrapper.dll,Interop.UIAutomationClient.dll,aardio.NetCaret.dll
//避免与 FlaUI 使用的同名不兼容 Interop.UIAutomationClient.dll 出现冲突
var asm = dotNet.loadFile($"~\lib\System\Windows\Automation\3\.res\UIAComWrapperEx.dll");

var Automation = asm.import("System.Windows.Automation"); 
var NetCaret = asm.import("aardio.NetCaret"); 

var Automation = System.Windows.Automation;
var NetCaret = aardio.NetCaret;
 
System.Windows.Automation = Automation;
System.Windows.Automation["3"] = Automation; 

namespace System.Windows.Automation{
	   
	var Release = ..com.Release; 
	var AutomationElement = AutomationElement; 
	AutomationElement[["NotSupported"]] = AutomationElement.NotSupported;

	/*
	此函数用于 winex.caret 。
	获取当前输入光标位置，返回表示屏幕位置的 ::RECT 结构体，hwnd 字段指定句柄。
	返回值兼容 winex.caret ，仅 Windows 8 以后系统支持。 
	*/
	GetCaret = function(){ 
		var caretRc = ::RECT(); 
		
		var isActive;
		try{
			isActive = NetCaret.Caret.GetCaretRect(caretRc);
		}
		catch(e){
			isActive = false;
		}
		
		if(isActive){
			return caretRc;
		}
	} 
	
	And = function(cond,isNot){
		var arr = {}
		for k,v in ..table.eachName(cond){
			if(k=="ControlType"){
				if(type.isString(v)){
					v = ControlType[v];
				}
			}
			..table.push(arr,PropertyCondition(AutomationElement[k+"Property"],v));
		}
		 
		var cond;
		if(#arr>1){
			cond = AndCondition(arr)
		}
		else {
			cond = arr[1]
		}
		
		if(isNot){
			cond = NotCondition(cond);
		}
		
		
		return cond;
	}
	
	Or = function(cond,isNot){
		var arr = {}
		for k,v in ..table.eachName(cond){
			if(..table.isArray(v)){
				for(i,v in v){
					if(k=="ControlType"){
						if(type.isString(v)){
							v = ControlType[v];
						}
					}
					..table.push(arr,PropertyCondition(AutomationElement[k+"Property"],v));
				
				} 
			}
			else {
				if(k=="ControlType"){
					if(type.isString(v)){
						v = Automation.ControlType[v];
					}
				}
				..table.push(arr,PropertyCondition(AutomationElement[k+"Property"],v));
			} 
		}
		
		var cond;
		if(#arr>1){
			cond = OrCondition(arr)
		}
		else {
			cond = arr[1]
		}
		
		if(isNot){
			cond = NotCondition(cond);
		}
		
		
		return cond;
	}
	
	FindByAnd = function(cond,root){
		return (root || AutomationElement.RootElement).FindFirst(TreeScope.Descendants, And(cond) )  
	} 
	
	FindByOr = function(cond,root){
		return (root || AutomationElement.RootElement).FindFirst(TreeScope.Descendants, Or(cond) )  
	}
} 

/**details(说明)
导入 System.Windows.Automation.3 以后，
调用时仍然使用 System.Windows.Automation，用法基本兼容。
扩展了一些原来需要通过 COM 接口调用的功能，例如支持 TextPattern2 。

System.Windows.Automation.3 调用开源组件 UIAComWrapper：
https://github.com/TestStack/UIAComWrapper/

UIAComWrapper 开源许可证：
https://github.com/TestStack/UIAComWrapper/blob/master/LICENSE.txt

不需要再导入 System.Windows.Automation 。
end details**/