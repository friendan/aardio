import dotNet;

var compiler = dotNet.createCompiler("C#");//创建C#语言编译器
compiler.Reference("~\lib\System\Windows\Automation\3\.res\Interop.UIAutomationClient.dll");
compiler.Reference("~\lib\System\Windows\Automation\3\.res\UIAComWrapper.dll");
compiler.Reference("WindowsBase")

//启用 dynamic，最低需求： Win8 .NET 4.x
compiler.Reference(
	"System.Core.dll","Microsoft.CSharp.dll"
);
compiler.Parameters.CompilerOptions = "/optimize" ;//https://learn.microsoft.com/dotnet/csharp/language-reference/compiler-options

//设置待编译C#源码（ 注释可赋值为字符串，注释标记首尾星号数目要一致 ）
//支持模板语法： doc://language-reference/templating/syntax.html
compiler.Source = /******  
using System;
using System.Windows.Automation; 
using System.Windows.Automation.Text; 

namespace aardio.NetCaret
{  
    public class Caret  
    {        
        public static bool GetCaretRect(dynamic caretInfo)
        {     
            AutomationElement activeWindow = AutomationElement.FocusedElement;
            if(activeWindow==null) return false; 

            try{
                caretInfo.hwnd = (int)activeWindow.GetCurrentPropertyValue(AutomationElement.NativeWindowHandleProperty);
               
                TextPattern2 textPattern2 = activeWindow.GetCurrentPattern(TextPattern2.Pattern) as TextPattern2;
                if (textPattern2 != null)
                { 
                    bool isActive = false;
                    TextPatternRange cursorRange2 = textPattern2.GetCaretRange(out isActive);
                    if(!isActive) return false;
                    
                    if ( cursorRange2 != null)
                    {
                        System.Windows.Rect[] boundingRectangles = cursorRange2.GetBoundingRectangles();
                        if(boundingRectangles.Length>0) {
                            var rc = boundingRectangles[0]; 
                            
                            caretInfo.top = rc.Top;
                            caretInfo.left = rc.Left;
							caretInfo.bottom = rc.Bottom;
							caretInfo.right = rc.Right;
							//caretInfo.version = 2;
							
                        	return true;
                        }
                         
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
            	try{
					TextPattern textPattern = activeWindow.GetCurrentPattern(TextPattern.Pattern) as TextPattern;
                	
                	if (textPattern != null)
                	{
                    	var selections = textPattern.GetSelection();
                    	if(selections.Length==0){
                        	return false;
                    	}
                 	
						TextPatternRange cursorRange = selections[0];  
                    	if (cursorRange != null)
                    	{
                        	System.Windows.Rect[] boundingRectangles = cursorRange.GetBoundingRectangles();
                         	
                        	if( boundingRectangles.Length == 0 ) {  
								//扩展光标位置为文本选区
								cursorRange.ExpandToEnclosingUnit( TextUnit.Character ); 
								boundingRectangles = cursorRange.GetBoundingRectangles();
							}	 
                        	
                        	if( boundingRectangles.Length>0) { 
                            	var rc = boundingRectangles[0];
                            	
                            	caretInfo.top = rc.Top;
                            	caretInfo.left = rc.Left;
								caretInfo.bottom = rc.Bottom;
								caretInfo.right = rc.Right;
								//caretInfo.version = 1;
								
                            	return true;
                        	}
                    	}
                	}	
            	}
            	catch (Exception ex2)
            	{
                	
            	}   
            }
            
            return false;
        }
    }   
} 
******/

/*
注意在 aardio 中编译，调用的是 CLR，而 CLR 只有 2.0 / 4.0 的区别，只支持这两个版本的语法。
例如安装了 .NET 3.5 但没有安装 .NET 4.x ，那么 CLR 2.0 下编译器不支持 var ，lambda 这些语法 (但是能运行编译后的 DLL)。
这时候也可以用 VS 编译成 DLL，运行仍然可以支持 CLR  2.0 / 4.0。
*/
var assembly = compiler.CompileOrFail("/aardio.NetCaret.dll");
