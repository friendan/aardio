import console;
控制台 = console;
	
namespace 控制台{
	输出 = log;
	错误输出 = self.error;
	打印 = print;
	格式化打印 = printf;
	十六进制 = hex; 
	载入动画 = showLoading;
	分页 = more;
	打开 = open;
	是否已打开 = isOpened; 
	关闭 = close;
	暂停 = pause;
	输出并暂停 = logPause;
	取数值 = getNumber;
	取文本 = getText;
	取密码 = getPassword;
	设置动画字符 = setLoadingDots;
	写文本 = writeText;
	写彩色文本 = writeColorText; 
	回写 = writeBack;
	全屏 = fullscreen;
	改模式 = modifyMode;
	是否 = askYesNo;
	检测按键 = kbHit;
	查看按键 = peek;
	清空输入 = clearInputBuffer;
	取按键 = kbRead;
	取字符 = getch;
	读回显字符 = getche;
	取窗口 = getWindow;
	取输出句柄 = getOutputHandle;
	取输入句柄 = getInputHandle;
	取错误句柄 = getErrorHandle;
	取代码页 = getCodePage;
	改代码页 = setCodePage;
	读输出字符 = readOutputCharacter;
	改颜色 = setColor;
	取文本属性 = getTextAttribute;
	改文本属性 = setTextAttribute;
	取光标可见 = isCursorVisible;
	改光标可见 = setCursorVisible;
	设置光标信息 = setCursorInfo;
	取光标信息 = getCursorInfo;
	输出变量 = varDump;
	输出对象 = dump;
	输出表对象 = dumpTable;
	转储文件 = dumpFile;

	改标题 = setTitle;
	取标题 = getTitle;
	清屏 = clearScreen;
	清行 = eraseLine;
	清至行尾 = eraseToEndOfLine;
	取屏幕信息 = getScreenBufferInfo;
	取大小 = getSize;
	取位置 = getPos;
	改位置 = setPos;
	画框 = box;	
}

/*****intellisense(控制台)
是否已打开() = 是否已显示控制台窗口。
打开() = 打开控制台窗口,\n如果控制台窗口已打开,该函数不进行任何操作,\n如果参数为 true 则将 console.utf8 设为true,\n请参考 console.utf8 的说明\n\n此函数重定向 msvcrt.dll 定义的 stdin,stdout,stderr 到控制台
设置动画字符(.(动画字符数组,是否显示在尾部,动画间隔毫秒数) = 指定showLoading函数使用的默认动画字符数组\n除参数@1必须指定之外，其他参数可选
载入动画( = 显示进度动画
载入动画(.(状态文本,动画颜色) = n所有参数都可以省略,状态文本为false关闭动画,\n调用console.open,console.log等函数都能自动关闭动画\n参数@2只能使用 console.color 的成员值
取数值( "请输入数值:__" ) = 读取用户输入的数值,\n如果用户输入错误的数值则显示错误提示并重新读取输入直到成功,\n可选在参数@2中指定缓冲区大小
取文本( "请输入文本:__" ) = 此函数内部调用io.getText自控制台读取用户输入,\n可选在参数@2中指定缓冲区大小\n此函数不调用io.stdin.read等标准输入函数
写文本(__) = 直接写入控制台，\n参数支持UTF8/UTF16/ANSI字符串，\n支持1个或多个参数，但遇到null参数会停止输出后面的参数,\n注意这个函数不会自动打开控制台，\n此函数不调用io.stdout.write,io.print等标准输出函数\n并且可以支持更多的Unicode字符
写彩色文本( = 调用 console.writeText 输出指定颜色文本,\n此函数不会自动打开控制台窗口
写彩色文本(.(文本,前景色,背景色) =  参数@2、参数@3只能使用 console.color 的成员值\n背景色可以省略
输出(__) = 调用 console.writeText 在控制台输出信息，支持多参数。\n多个参数间输出时用制表符分隔，并且在最后输入一个换行。\n此函数必须先导入 console 库才能使用。\n\n参数支持 UTF8/UTF16/ANSI 字符串，\n二进制或非 UTF8 或系统 ANSI 编码的字符串请改用 console.hex 函数。\n\n该函数可自动打开控制台窗口,而无需事先调用 io.open 。\n注意 console.log 与 console.print 指向同一函数。\n如果是输出错误信息，请改用 console.error 函数。
输出并暂停(__) = 调用 console.log 函数输入所有参数,\n然后调用 console.pause 函数暂停
打印("__") = 调用console.writeText在控制台输出信息,支持多参数\n多个参数间使用制表符分隔，并且在最后输入一个换行,\n参数支持UTF8/UTF16/ANSI字符串，\n该函数可自动打开控制台窗口,而无需事先调用io.open();\n注意console.log与console.print指向同一函数\n如果是输出调试信息,建议大家使用 console.error 函数
格式化打印("%s__", ) = 自动打开控制台\n调用console.log函数输出格式化字符串,\n格式化语法与string.format相同
十六进制打印(__) = 调用console.log以16进制输出字符串、或缓冲区的所有字节码,\n也可以使用 console.dumpTable 函数将字符串或buffer转换为字节码数组输出
回写(__) = 控制台输出字符串并覆盖最后显示的等长字符\n如果有多个参数则调用string.format格式化后输出
全屏() = 控制台窗口全屏切换
改模式(.(输入输出句柄,移除模式,添加模式) = 设置控制台的显示模式\n参数用法参考 WINAPI SetConsoleMode\n参数@1如果省略则默认为标准输出句柄\n成功返回当前模式,失败返回null
错误输出("__") = 使用标准错误输出流（io.stderr）输出，可以重定向，\n可指定任意个参数，参数转换为字符串以后输出。\n\n在开发环境中会自动打开控制台以红色字体输出参数，并输出当前调用栈信息。\n发布后的程序不会自动打开控制台，不会输出调用栈信息。
分页( = 等待并在按任意键以后继续，用于在控制台分页输出时等待按键。
分页(.(分页大小,是否清屏) = 略参数  @1 则参数默认为 1 。\n如果参数 @2 为true，按任意键以后清除控制台已显示的内容。
是否("按Y键继续,按N键取消") = 等待用户按Y或N键
检测按键() = 检测键盘有没有输入
查看按键() = 测试键盘有没有输入\n有则读取并返回keyEvent对象,否则返回空\n!console_kbevent.
清空输入() = 刷新控制台输入缓冲区\n丢弃缓冲区的所有输入
取按键() = 读取用户按键返回keyEvent对象\n!console_kbevent.
取按键(true) = 等待用户按任意键并返回keyEvent对象(不包含释放按键事件)
取字符() = 读取输入字节码,中文字返回两个字节码\n控制台不回显字符
读回显字符() = 读取输入字符\n控制台回显字符
取密码() = 读取密码\n可选使用参数一指定控制台回显掩码,默认显示星号
取窗口() =  返回控制台窗口句柄\n使用此函数可判断当前是否已打开控制台窗口;
取输出句柄() = 标准输出句柄
取输入句柄() = 标准输入句柄
取错误句柄() = 错误输出句柄
取代码页() = 获取输入代码页,输出代码页
改代码页(.(输入代码页,输出代码页) = 设置代码页\n应在打开控制台后使用该函数
读输出字符() = 读取标准输出缓冲区文本。\n可选用参数 @1 指定要读取的缓冲区大小，\n如果不指定则自动获取缓冲区长度
改颜色(.(前景色,背景色) = 设置控制台前景色与背景色\n参数必须使用 console.color 的成员值\n无参数恢复默认颜色
取文本属性() = 获取控制台文本颜色,\n返回颜色值为 背景色 * 0x10 + 前景色
改文本属性( = 设置文本前景色与背景色,\n设置整个窗口的背景色请使用 console.setColor;
改文本属性(.(颜色) = 颜色值必须为 背景色 * 0x10 + 前景色,\n前景色,背景色必须使用 console.color 的成员值 
改文本属性(.(前景色,背景色) = 参数必须使用 console.color 的成员值\n无参数恢复默认颜色 
取光标可见() =控制台当前是否显示光标
改光标可见(.(visible) = 设置控制台是否显示光标
设置光标信息(.(info) = 修改光标信息,\n用法请参考此函数源码
取光标信息() = 返回光标信息,\n用法请参考此函数源码
输出变量(__/*变量*/) = 此函数显示一个或多个参数的类型与值
输出对象( = 显示变量的值,支持多参数
输出对象(.(value,->->->) = 在控制台显示普通 table,string,number 等类型的值,不显示函数等,\ntable 对象仅显示键名为字符串的值，以及数值索引自 1 开始的顺序数组
输出对象(.(comObj) = 参数 @1 指定 COM 对象，且无其他参数，\n则在控制台输出调用 com.DumpTypeInfo 函数返回的类型信息。\n调用 com.tlbDoc.dump 函数可打印 COM 对象更详细的类型库信息
输出对象(.(comObj,enumType) = 参数 @1 指定 COM 对象，参数 @2 指定枚举类型名，\n在控制台输出该枚举类型的所有名值对。\n\n通常枚举名值对也是 COM 常量名值对，\n可以使用列举的枚举名字（不用指定枚举类型名）\n作为 COM 对象的成员名获取枚举值
dumpJson(__/*变量*/) = 将对像转换为格式化的 JSON 文本并输出到控制台\n对象如果包含数值索引自1开始的顺序数组成员则转换为 JSON 数组\nJSON 数组会忽略其他索引不在数组范围内的成员
输出表对象(__/*表对象*/) = 如果参数 @1 传入字符串或 buffer，转换为字节码数组再输出。\n\n如果参数 @1 传入表参数,\n使用 ..util.table.stringify 函数格式化为文本然后输出到控制台。\n仅转换表包含的文本、数值、布尔值、嵌套表对象,\n小数精度最大为 6 位、并自动清除小数尾部多余的 0,\n如果表定义了 tostring 元方法、则转换为字符串\n忽略其他类型,忽略循环引用的表
转储文件(__/*文件路径*/) = 输出参数 @1 指定文件路径的文件内容
关闭() = 关闭控制台
暂停( = 暂停,\n按任意键继续
暂停(.(按键后是否关闭控制台,提示) = 返回用户按键键码 
改标题("__") = 设置控制台标题,\n此函数会打开控制台窗口
取标题() = 获取控制台标题
清屏() = 清屏
清行() = 清除当前行\n可选指定要在当前行输出的一个或多个参数
清至行尾() = 清除当前输入光标到行尾的所有字符\n注意用‘\r’虽然能回退光标到行首，但并不擦除已输出的字符
取屏幕信息() = 返回屏幕缓冲区信息
取大小() = 返回控制台屏幕缓冲区每行可输入的字符数,\n以及可输入的字符行数
取位置() = 返回光标坐标
改位置(.(列,行)= 设置光标坐标
画框(.(列,行,终止列,终止行,背景色,边框标题) = 在控制台画一个色块,边框标题可省略,\n参数@1,@2省略则自动居中\n返回列,行,终止列,终止行
end intellisense*****/