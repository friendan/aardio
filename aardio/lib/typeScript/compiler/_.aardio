import fsys; 
import web.script;
import sevenZip.lzma;
namespace typeScript;

uncompress = ..sevenZip.lzma.unCompress;

filesystem = { 
	fileData = {
		['~/lib/typeScript/compiler/lib.d.ts'] = $'~/lib/typeScript/compiler/.res/lib.d.ts';
		['~/lib/typeScript/compiler/lib.es6.d.ts'] = $'~/lib/typeScript/compiler/.res/lib.es6.d.ts';
		['~/lib/typeScript/compiler/lib.webworker.importscripts.d.ts'] = $'~/lib/typeScript/compiler/.res/lib.webworker.importscripts.d.ts';
		['~/lib/typeScript/compiler/lib.es5.d.ts'] = uncompress( $'~/lib/typeScript/compiler/.res/lib.es5.d.ts.lzma' );
		['~/lib/typeScript/compiler/lib.dom.d.ts'] = uncompress( $'~/lib/typeScript/compiler/.res/lib.dom.d.ts.lzma' );
		['~/lib/typeScript/compiler/lib.scripthost.d.ts'] = uncompress( $'~/lib/typeScript/compiler/.res/lib.scriptHost.d.ts.lzma' );
	};
	
	getExecutingFilePath = function () {
        return "~/lib/typeScript/compiler/tsc.js"
    };
    newLine = '\r\n';
    useCaseSensitiveFileNames = false;
    write = function (s) { 
    	 ..io.stdout.write(s);
    };
    readFile = function(fileName, encoding){ 
    	return owner.fileData[fileName] : ..string.load(fileName);
    }; 
    writeFile = function(fileName, data, writeByteOrderMark){
    	..string.save(fileName, data)
    };
    resolvePath = function (path) { 
    	if( owner.fileData[path] ) return path;
        return ..io.fullpath(path)
    };
    fileExists = function (path) { 
    	if( owner.fileData[path] ) return true;
        return ..io.exist(path);
    };
    directoryExists = function (path) {
        return  ..fsys.isDir(path)
    };
    createDirectory = function (directoryName) {
        ..fsys.createDir(directoryName)
    };
    getCurrentDirectory = function () {
        return ..fsys.getCurDir();
    };
    readDirectory = function(path, extension){
    	var result = {};
    	..fsys.enum( path, "*.*",
    		function(dir,filename,fullpath,findData){ 
    			if(filename){ 
               		if( !extension || ..string.endWith(filename,extension) ){
               			..table.push(result,fullpath)
               		}
    			} 
    		}  
    	);
    	 
    	return _vm.createArray(result);
    }; 
    getMemoryUsage = function(){
    	return -1;
    };
    exit = function (exitCode) {
        
    }
}

_vm = ..web.script("ES6") 
_vm.__filesystem__ = filesystem; 
 
var tcsCode = uncompress( $"~\lib\typeScript\compiler\.res\tsc.js.lzma" );
/*
tsc.js 修改 ts.sys = __filesystem__;
删掉最后一行 ts.executeCommandLine(ts.sys, ts.noop, ts.sys.args)
*/
_vm.script = tcsCode;

compiler = _vm.script.ts;

compiler[["execute"]] = function(...){
	..fsys.setCurDir("/") 
	filesystem.args = _vm.createArray( type(...) == type.table ? ... : { ... } );  
	compiler.executeCommandLine(compiler.sys, compiler.noop, filesystem.args);
}

/**intellisense(typeScript)
compiler = TypeScript 编译器，仅支持 Win10/Win11
compiler.execute("-help") = 可指定多个启动参数或参数数组,例如_ARGV
compiler.version = 版本号
filesystem.fileData = 虚拟文件数组,\n键为文件名,值为文件数据
filesystem.readFile(fileName,encoding) = @.readFile = function(fileName,encoding){
    return ..string.load(fileName);
}; 
filesystem.writeFile(fileName,data,writeByteOrderMark) = @.writeFile = function(fileName,data,writeByteOrderMark){
    ..string.save(fileName, data)
};
end intellisense**/

/*
..sevenZip.lzma.encodeFile('~/lib/typeScript/compiler/.res/lib.d.ts','~/lib/typeScript/compiler/.res/lib.d.ts.lzma');
..sevenZip.lzma.encodeFile('~/lib/typeScript/compiler/.res/lib.es6.d.ts','~/lib/typeScript/compiler/.res/lib.es6.d.ts.lzma');
..sevenZip.lzma.encodeFile('~/lib/typeScript/compiler/.res/tsc.js','~/lib/typeScript/compiler/.res/tsc.js.lzma');
..sevenZip.lzma.encodeFile('~/lib/typeScript/compiler/.res/lib.scriptHost.d.ts','~/lib/typeScript/compiler/.res/lib.scriptHost.d.ts.lzma');
*/ 

 
