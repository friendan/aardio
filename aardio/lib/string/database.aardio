//database 文本数据
namespace string;

class database{
	ctor(separator,quote){
		this.separator = separator : '\t';
		this.quote = quote : '"';
		this.dataTable = {};
	};
	parse = function(str){
		var sep = this.separator[1] : '\t'#;
		var q = this.quote ? this.quote[1];
		var dt = {};
		var push = ..table.push; 
		
		var row = {};
		var len = #str;
		var chr;
  
		for(i=1;len;1){ 
			chr = str[i];
			if( chr == sep ) { push( row,""); continue;  }
			if( chr == ' ' || chr == '\t') { continue;  }
			
			var col = {};
			if( q ? chr == q ){
				for(j=i+1;len;1){
					i=j;
					chr = str[j];
					if( chr & 0x80 ){
						push(col,chr)
						continue ;
					}
					if( chr = q ) {
						if( str[j+1] = q ){  j++; };
						else{ break; }
					}
					push(col,chr);
				}
				
				for(j=i+1;len;1){ 
					chr = str[i+1];
					if( chr == '\r'# || chr == '\n'# ) break;
					if( chr == sep ){ 
						if(#col)push(row,..string.pack(col)); 
						else push(row,"");
						i++;
						col={};
					}
				}
				
				chr = str[i+1];
				if( chr == '\r'# || chr == '\n'# ) {
					if(#col)push(row,..string.pack(col));else push(row,"");
					if(#row)push( dt,row )
					row = {};
					i++;
					
					if(chr == '\r'#  && str[i+1]=='\n'#){i++;}
					continue; 
				}
			}
			else {
				for(j=i;len;1){
					i=j;
					chr = str[j];
					if( chr & 0x80 ){
						push(col,chr)
						continue ;
					}
					if( chr = sep ) {
						if(#col)push(row,..string.pack(col)); 
						else push(row,"");
						continue 2;
					}
					if( chr == '\r'# || chr == '\n'# ) { 
						if(#col)push(row,..string.pack(col));else push(row,"");
						
						if(#row){ push( dt,row ) }
						row = {}; 
						
						if(chr == '\r'#  && str[i+1]=='\n'#){i++;}
						continue 2; 
					}
					push(col,chr);
				}	
			} 
			
			if(#col)push(row,..string.pack(col)); 
		}  
		
		if(#row){ push( dt,row ) } 
		
		this.dataTable = dt;
		return dt;
	}
	stringify = function(tab){ 
		if(!tab){
			tab = this.dataTable;
			this.dataTable = {};
		}
		if( tab.fields ){
			var fields = tab.fields;
			var dt = { fields }
			for(r=1;#tab;1){
				var row = {};
				for(i=1;#fields;1){
					..table.push(row,tab[r][ fields[i] ] )
				} 
				..table.push(dt,row);
			}
			return this.stringify(dt);
		}
		
		var q = this.quote;
		var q2 = q ? ( q ++ q );
		var dt = {};
		for(r=1;#tab;1){
			var row = tab[r];
			var line = {};
			for(c=1;#row;1){
				var col = tostring(row[c]); 
				if( q ){
					if(  ..string.indexOf(col,this.separator )
						|| (    ..string.indexOf(col,q ) ) ){
						col = '"' + ..string.replace( col, "@@"+q, q2  ) + '"'; 
					}
				}
				..table.push(line,col);
			}
			..table.push(dt,..string.join(line,this.separator) );
		}
		return ..string.join(dt,'\r\n');
	}
	stringifyA = function(tab){
		return ..string.fromto(this.stringify(tab)); 
	}
	load = function(path,cp){
		var s = ..string.load(path);
		if( s[1] == 0xEF  && s[2] == 0xBB && s[3] == 0xBF ){
			s = ..string.right(s,-4);
		}
		else {
			s = ..string.fromto(s,cp:0,65001);
		} 
		return this.parse(s);
	};
	save = function(path,tab){
		..string.save(path,'\xEF\xBB\xBF');
		..string.save(path, this.stringify(tab) ,true );
	};
	saveA = function(path,tab){
		..string.save(path, this.stringifyA(tab)  );
	};
	push = function(...){ 
		if( type(...) == "table" ) ..table.push( this.dataTable,... );
		else ..table.push( this.dataTable,{...} );
	}; 
}

/**intellisense()
string.database = TXT,CSV 格式数据库简单解析。\n注意文本数据规范不统一，不同的程序解析结果可能有差异。\n用法请参考：范例程序 / 数据库 / csv / string.database
string.database(.(分隔符,文本包含符) = 创建 TXT,CSV 格式数据库解析器,\n参数可以省略,默认使用制表符作为分隔符,双引号包含文本
string.database() = !string_database.
!string_database.separator = 列分隔符
!string_database.quote = 文本包含符
!string_database.dataTable = 对象本身存储的数据表。\nparse 函数解析得到的数组会赋值并替换此属性。\npush 函数则默认向此数据表添加数据。\nstringify,stringifyA 函数在不指定参数时使用此数据表作为参数
!string_database.parse( = 解析数据并返回得到的数组
!string_database.parse(.(文本) = 解析数据并返回得到的数组。\n对象的 dataTable 属性也会被赋值并替换为这里返回的数组
!string_database.stringify( = 数据表转换为 UTF8 文本
!string_database.stringify(.(数据数组) = 数据表转换为 UTF8 文本\n如果不指定参数,则使用对象的 dataTable 属性作为参数
!string_database.stringifyA( = 数据表转换为 ANSI 文本
!string_database.stringifyA(.(数据数组) = 数据表转换为 ANSI 文本\n如果不指定参数,则使用对象的 dataTable 属性作为参数
!string_database.push( = 添加数据到对象的 dataTable 属性指向的数据表
!string_database.push(.(->->->) = 添加数据到对象的 dataTable 属性指向的数据表\n参数 @1 如果是表，则所有参数都作为数据行添加到 dataTable 数据表\n否则所有参数合并为一行数据并添加到 dataTable 数据表\n之后可以调用 stringify 函数生成文本
!string_database.load( = 加载并解析文件
!string_database.load(.(文件路径,代码页) = 加载并解析文件，返回数组,\n文件开头有 UTF-8 BOM 则以 UTF-8 编码读入内容,\n否则以参数 @2 指定的编码读入并转换为 UTF-8 编码，\n参数 @2 省略时默认值为 0，表示当前默认 ANSI 编码
!string_database.save( = 以 UTF-8 编码写入文件
!string_database.save(.(文件路径,数据数组) = 在指定文件写入 UTF-8 BOM，\n然后将数据以 UTF-8 编码、CSV 格式写入文件\n如果不指定参数,则使用之前调用 push 函数添加的数据
!string_database.saveA( = 以 ANSI 编码写入文件
!string_database.saveA(.(文件路径,数据数组) = 将数据以 ANSI 编码、CSV 格式写入文件\n如果不指定参数,则使用之前调用 push 函数添加的数据
end intellisense**/