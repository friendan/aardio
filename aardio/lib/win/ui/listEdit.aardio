//listEdit 列表编辑框
import win.ui.ctrl.edit;

namespace win.ui;

class listEdit{
	ctor( listbox ){
		this = listbox;  
		
		this.addCtrl(
            editBox = { 
                cls="edit";font = this.getFont() ;left = 0;top = 0;
                right = 50;bottom = 50;autoResize = false ;hide = 1;edge = 1;
                wndproc = function( hwnd, message, wParam, lParam ){
                    var update; 
                    if( ( message = 0x8/*_WM_KILLFOCUS*/)  || (message == 0x101/*_WM_KEYUP*/ && wParam == 0xD/*_VK_RETURN*/ ) ) {
                        update = true;
                    }
                    elseif(message == 0x201/*_WM_LBUTTONDOWN*/ ){
                        var x,y = ..win.getMessagePos(lParam)
                        var rc = this.editBox.getClientRect();
                       
                        if( ! ::PtInRect(rc,x,y) ) update = true;
                        this.editBox.capture = !update;
                    } 
                    elseif(message == 0x101/*_WM_KEYUP*/){
                    	if( wParam == 0x1B/*_VK_ESC*/){
                    		owner.show(false);
                    		
                    		if(owner.text=="" && owner.tempItem && owner.selIndex==this.count){
                    			this.delete(owner.selIndex);
                    		}
                    		return;
                    	}
                    }
                    
                    if( update && !owner.hide){
                        
                    	owner.show(false);
                        var t = this.getItemText(owner.selIndex);
                        if( t!= owner.text ){
                        	this.add(owner.text,owner.selIndex)
	 						this.delete(owner.selIndex+1)
	 						
	 						if( this.onEditChanged ) {
                        		if( false === this.onEditChanged(owner.text, owner.selIndex) ) return;	
                        	}
                        }
                        elseif(!#t && owner.tempItem && owner.selIndex==this.count){
                        	this.delete(owner.selIndex);
                        }
                        	
                    }
                }  
            }
        ) 
	};
	beginEdit = function(selIndex){
		if(selIndex===null) selIndex = this.selIndex;
		if(!selIndex) {
			selIndex = this.add("",-1);
			this.editBox.tempItem = true;
		}
		else {
			this.editBox.tempItem = false;
		}
		
		this.ensureVisible(selIndex);
		this.editBox.selIndex = selIndex;
		
		var edit = this.editBox;
       	if( ..win.isVisible(edit.hwnd) ) return;  
       	
        var event = this.editBox.event;
        if(selIndex!=0) edit.text=this.getItemText(selIndex);
        
        var rc =this.getItemRect( this.editBox.selIndex);
        var rcClient=this.getClientRect();
        if( rcClient.bottom > rc.bottom + 4 ){
            rc.bottom = rc.bottom + 4;
        }
        else {
            rc.top = rc.top - 4;
        }
        
        edit.setRect(rc);
        rc.inflate(-1,-1);
        edit.setClientRect(rc);
        edit.show(); 
        edit.setFocus();
        edit.capture = true;
        return true;	 
	}; 
	_precommand = function(id,event){
		if( event ==  0x2/*_LBN_DBLCLK*/ ){ 
			this.beginEdit(this.selIndex); 
		}	 
	};
}

/**intellisense()
win.ui.listEdit(__) = 参数必须指定一个 listbox 控件对象\n返回一个可编辑单元格的列表框对象,\n\n鼠标左键双击单元格、或者按空格键开始编辑,\n回车完成编辑,ESC键撤消编辑,回车+上下方向键快速移动到其他项,\n用户完成编辑后会触发onEditChanged事件
win.ui.listEdit() = !winuilstEdit.
!winuilstEdit.editBox = 实现编辑功能的edit控件\n此功能需要扩展listview并实现了编辑功能的的控件才能支持\n!edit.
!winuilstEdit.onEditChanged(newText,selIndex) = @.onEditChanged = function(newText,selIndex){
	__/*控件完成编辑\ntext为更新后的文本,selIndex为行号\n返回false取消编辑*/
}
!winuilstEdit.beginEdit(__/*列表项索引*/) = 切换到编辑模式，可选用参数 @1 指定列表项索引。\n不指定则自动获取，指定为 0 则在列表尾部新增项目并切换到编辑模式。\n新增项目如果不输入内容则自动删除。
end intellisense**/