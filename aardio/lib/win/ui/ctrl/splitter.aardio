//splitter 拆分条
import win.ui.ctrl.metaProperty;  
namespace win.ui.ctrl ;
	
class splitter{
    ctor(parent,tParam){  
    	if( tParam ){ 
    		tParam.style |=0x100/*_BS_PATTERN*/
    		tParam.cls = "splitter"  
    		
    		if(tParam.edge) tParam.exstyle |= 0x100/*_WS_EX_WINDOWEDGE*/;	
    		if( tParam.center===null || tParam.center )
				tParam.style |= 0x200/*_SS_CENTERIMAGE*/
    		
    		this.horz =tParam.horz; //是否为水平拆分； 
    		this.ltMin = 20;
    		this.rbMin = 20;
		}	 
    };
       
    onCreate =function(){
    	var x0,y0,
    	    ,c1w,c1h,
    	    ,c2w,c2h,
    	    ,spx,spy,spw,sph,
    	    ,oldPos,move,
    	    ,dragging,leftButtonDown;
    	
    	var hDc;
    	var hCur = ::LoadCursor( ,topointer( this.horz ? 0x7F85/*_IDC_SIZENS*/ : 0x7F84/*_IDC_SIZEWE*/ ) );
    	var limit =function(movexy){
    		var move=movexy;
    		var max;
    		if(movexy<0){
    			if(! this.horz){
    				max =-c2w+this.rbMin;
    				if(movexy < max) 
    					move =max;
       			}else {
    				max = -c2h+this.rbMin;
    				if(movexy < max)
    					move = max;
    			}
    		}else {
    			if(! this.horz){
    				max =c1w-this.ltMin;
    				if(movexy >max)
    					move = max;
    			}else {
    				max =c1h-this.ltMin;
    				if(movexy >max)
    					move = max;
    			}
    		}
    		return move; 		 
    	}
    	 
    	this.wndproc = function(hwnd,message,wParam,lParam){ 
			select(message) {
				case 0x200/*_WM_MOUSEMOVE*/{
					if(leftButtonDown){
						var x,y =..win.getMessagePos(lParam);
						
						dragging = true; 
						if( ! this.horz  ){
							move = limit(x0 - x);
							
							if(oldPos){
								this._drawSplitter(hDc,oldPos,spy,spw,sph);
							}
							this._drawSplitter(hDc,spx-move,spy,spw,sph);
							oldPos =spx-move;
						}
						else {
							move =limit(y0-y);
							
							if(oldPos){
								this._drawSplitter(hDc,spx,oldPos,spw,sph);
							}
							this._drawSplitter(hDc,spx,spy-move,spw,sph);
							oldPos = spy-move;
						}
					}
				}
				case 0x20/*_WM_SETCURSOR*/ {
					::SetCursor(hCur);		
					return true; 
				}
				case 0x201/*_WM_LBUTTONDOWN*/ {
					if((this.ltControl===null)or(this.rbControl===null)){ 
						return ;
					} 
					..win.setCapture(hwnd);
					
					var ltControl = this.ltControl[1] || this.ltControl;
					var rbControl = this.rbControl[1] || this.rbControl;
					
					leftButtonDown = true;
					x0,y0 =..win.getMessagePos(lParam);
					_,_,c1w,c1h = ltControl.getPos();
					_,_,c2w,c2h = rbControl.getPos();
					
					spx,spy,spw,sph = this.getPos();
					oldPos = 0;
					if(hDc)::ReleaseDC(this.parent.hwnd,hDc);  
					hDc =::GetDC(this.parent.hwnd); 
					
					if( ! this.horz  ){ 
						this._drawSplitter(hDc,spx,spy,spw,sph); 
						oldPos = spx;
					}
					else { 
						this._drawSplitter(hDc,spx,spy,spw,sph);
						oldPos = spy;
					}
				}
				case 0x202/*_WM_LBUTTONUP*/ {
					if( leftButtonDown ){
						if(hDc){
							if(oldPos!=0){
								if( ! this.horz  ){
									this._drawSplitter(hDc,oldPos,spy,spw,sph);
								}
								else {
									this._drawSplitter(hDc,spx,oldPos,spw,sph);
								}
							}
							
							::ReleaseDC(this.parent.hwnd,hDc); 
							hDc = null;
						}
						 
						..win.releaseCapture();
						leftButtonDown = false;	
						
						if(dragging){
							if( !this.horz ){
							 	if(this.ltControl[1]){
							 		for(k,ctrl in this.ltControl){
							 			var x,y,cx,cy = ctrl.getPos();
										ctrl.setPos(x,y,cx-move,cy);
							 		}
							 	}
							 	else{
							 		var x,y,cx,cy = this.ltControl.getPos();
									this.ltControl.setPos(x,y,cx-move,cy);
								}
								
								if(this.rbControl[1]){
									for(k,ctrl in this.rbControl){
							 			var x,y,cx,cy = ctrl.getPos();
										ctrl.setPos(x-move,y,cx+move,cy);
							 		}
								}
								else {
									var x,y,cx,cy = this.rbControl.getPos();
									this.rbControl.setPos(x-move,y,cx+move,cy);
								}
								
								
								this.setPos(spx-move,spy);
							}
							else {
								
								if(this.ltControl[1]){
							 		for(k,ctrl in this.ltControl){
							 			var x,y,cx,cy = ctrl.getPos();
										ctrl.setPos(x,y,cx,cy-move);
							 		}
							 	}
							 	else {
							 		var x,y,cx,cy = this.ltControl.getPos();
									this.ltControl.setPos(x,y,cx,cy-move);
							 	}
							 	 
								if(this.rbControl[1]){
									for(k,ctrl in this.rbControl){
							 			var x,y,cx,cy = ctrl.getPos();
										ctrl.setPos(x,y-move,cx,cy+move);
							 		}
								}
								else {
									var x,y,cx,cy = this.rbControl.getPos()
									this.rbControl.setPos(x,y-move,cx,cy+move);	
								}
								
								this.setPos(spx,spy-move);							
							}
							
							dragging = false;
							
							if(this.onSplitterMoved){
								this.onSplitterMoved(this.getRect().ltrb());
							}
							this.redraw();
						}
					}
				} 
			}
		}  
    };
    _drawSplitter =function(hDc,x,y,width,height){
    	var sbmp ='\u00AA\u0055\u00AA\u0055';
		var hbmp =::CreateBitmap(4,4,1,1,sbmp);
		var brush =::CreatePatternBrush(hbmp);
		var brush_old =::SelectObject(hDc,brush);
		::PatBlt(hDc,x,y,width,height,0x5A0049/*_PATINVERT*/);
		::SelectObject(hDc,brush_old);
		::DeleteObject(brush);
		::DeleteObject(hbmp);	
    };
   	_preadjust = function(){
   		if( !(this.ltControl && this.rbControl) )return;
   		
   		var ltControl = this.ltControl[1] || this.ltControl;
		var rbControl = this.rbControl[1] || this.rbControl;
					
   		var ltX,ltY,ltCx,ltCy = ltControl.getPos();
   		var rbX,rbY,rbCx,rbCy = rbControl.getPos();
   		var x,y,cx,cy = this.getPos(); 
   	 
   		if( this.horz ){
   			owner.setPos(x,ltY+ltCy);
   			
   			if(this.rbControl[1]){
				for(k,ctrl in this.rbControl){
					var rbX,rbY,rbCx,rbCy = ctrl.getPos();
					ctrl.setPos(rbX , ltY + ltCy + cy,rbCx,rbY + rbCy - (ltY + ltCy + cy) ); 	
				} 
   			}
   			else {
   				this.rbControl.setPos(rbX , ltY + ltCy + cy,rbCx,rbY + rbCy - (ltY + ltCy + cy) ); 	
   			} 
   		}
   		else{
   			owner.setPos(ltX + ltCx ,y);
   			
   			if(this.rbControl[1]){
   				for(k,ctrl in this.rbControl){
					var rbX,rbY,rbCx,rbCy = ctrl.getPos();
					ctrl.setPos(ltX + ltCx + cx , rbY, rbX + rbCx - (ltX + ltCx + cx),rbCy );	
				} 
   			}
   			else {
   				this.rbControl.setPos(ltX + ltCx + cx , rbY, rbX + rbCx - (ltX + ltCx + cx),rbCy );
   			} 
   		}  
   	};
	@_metaProperty;
}

splitter._metaProperty = metaProperty(  
	split =function(ctrl1,ctrl2 ){ 
		var c1 = ctrl1[1] || ctrl1;
		var c2 = ctrl2[1] || ctrl2;
		
    	if( owner.horz ){
    		if( c1.top < c2.top ){
    			owner[["ltControl"]] = ctrl1;
    			owner[["rbControl"]] = ctrl2;  
    		}
    		else {
    			owner[["ltControl"]] = ctrl2;
    			owner[["rbControl"]] = ctrl1;  
    		} 
    	}
    	else {
    		
    		if( c1.left < c2.left ){
    			owner[["ltControl"]] = ctrl1;
    			owner[["rbControl"]] = ctrl2;  
    		}
    		else {
    			owner[["ltControl"]] = ctrl2;
    			owner[["rbControl"]] = ctrl1; 
    		} 
    	} 
    };

);

..win.registerClassEx("splitter",,"static");

//感谢: 琴鸣 贡献最初的源码

/**details(用法说明)

要点：

1. 使用控件的 split 函数拆分多个控件。
	
	例如:
	
		winform.splitter1.split( winform.edit1,winform.edit2 )  
	
	参数也可以是控件数组，每个控件数组必须包含位于拆分条同一侧的控件。
	
	例如:
	
		winform.splitter1.split( winform.edit1,{ winform.edit2,winform.edit3} )  
	
2. 在调整窗口大小时，拆分条会负责让被拆分的控件吸附在自己的两侧。

	但是被拆分控件以及拆分条本身的其他固定边距属性、自适应大小属性应当自行根据需要设置。

end details**/

/**intellisense()
!splitter.ltControl = 拆分条左边或上边的控件。\n可以是控件对象，也可以是包含控件的数组。\n只能调用 split 函数修改此属性。\n!static.
!splitter.rbControl = 拆分条右边或下边的控件。\n可以是控件对象，也可以是包含控件的数组。\n只能调用 split 函数修改此属性。\n!static.
!splitter.split(.(前面的控件,后面的控件) = 指定需要拆分的控件。\n参数可以是控件对象，也可以是包含控件对象的数组。\n同一数组中的控件必须位于拆分条的同一侧。\n被折分的控件可在控件属性中指定是否支持自动调整大小。\n\n也可以将更多控件可放入子窗口并以 custom 控件作为容器加载，然后再拆分。\n\nlistbox 反复改变高度会因为自动适应项目行高而越来越小,\n要用拆分条改变 listbox 高度时最好也放入 custom 容器
!splitter.horz = 是否水平拆分条
!splitter.ltMin = 前面的控件最小尺寸
!splitter.rbMin = 后面的控件最小尺寸
!splitter.cls = 设计时类名
!splitter.className = 运行时类名
!splitter.hwnd = 控件句柄
!splitter.id = 控件ID
!splitter.text = 控件文本
!splitter._parentForm = 创建该控件的父窗口（win.form对象）,\n设计时窗体容器是所有拖放在窗体上的控件的 _parentForm,\n\n即使窗口移除子窗口样式、更改父子关系，或以 orphanWindow显示,\n控件的 _parentForm 始终都不会改变\n!winform.
!splitter.getParent() = 返回父窗口\n!splitter.
!splitter.setParent(__/*控件对象*/) = 改变父窗口 
!splitter.translateAccelerator = @.translateAccelerator = function(msg){ \n	__/*返回是否快捷键*/\n} 
!splitter.adjust = @.adjust = function( cx,cy,wParam ) {	 \n	__ \n};  
!splitter.adjust() = 调整窗口 - 自定义事件函数
!splitter.hide = 控件是否隐藏
!splitter.disabled = 是否禁用
!splitter.left = 左侧坐标
!splitter.right = 右侧坐标
!splitter.top = 顶部坐标
!splitter.bottom = 底部坐标
!splitter.width = 宽度
!splitter.height = 高度
!splitter.redraw() = 刷新
!splitter.redrawTransparent() = 刷新\n透明背景时请使用此函数替代redraw()
!splitter.show(true__) = 显示控件
!splitter.getRect() = 控件区块位置(::RECT结构体)
!splitter.getRect(true) = 控件屏幕区块位置(::RECT结构体)  
!splitter.setRect(rc) = 设置控件区块位置(::RECT结构体)  
!splitter.setRect(rc,true) = 设置控件屏幕区块位置(::RECT结构体)
!splitter.getClientRect() =  控件客户区块位置(::RECT结构体)\n!rect.
!splitter.theme = 外观主题,例如\nwinform.button.theme = "Explorer"\nwinform.button.theme = false
!splitter.modifyStyle(.(remove,add,swpFlags) = 修改窗口样式,所有参数都是可选参数,\n@remove 用数值指定要移除的样式,可使用 _WS_ 前缀的常量\n@add 用数值指定要添加的样式,可使用 _WS_ 前缀的常量\n@swpFlags 可选用数值指定调整窗口选项,可使用 _SWP_ 前缀的常量\n如果指定了 @swpFlag ,则使用该参数调用::SetWindowPos\n细节请参考 win.modifyStyle 函数源码 
!splitter.modifyStyleEx(.(remove,add,swpFlags) = 修改窗口扩展样式,所有参数都是可选参数,\n@remove 用数值指定要移除的样式,可使用 _WS_EX_ 前缀的常量\n@add 用数值指定要添加的样式,可使用 _WS_EX_ 前缀的常量\n@swpFlags 可选用数值指定调整窗口选项,可使用 _SWP_ 前缀的常量\n如果指定了 @swpFlag ,则使用该参数调用::SetWindowPos\n细节请参考 win.modifyStyle 函数源码
!splitter.capture = 是否捕获全局鼠标消息
!splitter.close() = 关闭控件窗口
!splitter.invalidate(__/*可选使用::RECT()对象指定客户区*/) = 使窗口绘图区无效
!splitter.invalidate(__/*可选使用::RECT()对象指定客户区*/,0) = 使窗口绘图区无效\n不刷新背景
!splitter.update() = 重绘invalidate函数指定的区块
!splitter.setPos(.(x坐标,y坐标,宽,高,插入位置,参数) = 调整窗口位置或排序,所有参数可选\n同时指定x,y坐标则移动位置\n同时指定宽高则改变大小\n指定插入位置(句柄或_HWND前缀常量)则调整Z序
!splitter.getPos() = 返回相对坐标,宽,高\nx,y,cx,cy=win.getPos(hwnd)
!splitter.sendMessage(.(msg,wParam,lParam) = 发送窗口消息\n此函数用法请参考 ::User32.SendMessage
!splitter.postMessage(.(msg,wParam,lParam) = 投递窗口消息到消息队列中\n此函数用法请参考 ::User32.PostMessage
!splitter.onSplitterMoved = @.onSplitterMoved = function(l,t,r,b){
	__/*拆分条已被拖拽移动到新位置，l,r,r,b 分别为左上右下坐标*/
}
?win.ui.ctrl.static = !splitter.
win.ui.ctrl.splitter() = 拆分条控件\n!splitter.
win.ui.ctrl.splitter = 拆分条控件支持库
end intellisense**/