import web.json;
import raw.jsonCall;

namespace golang.mdns;
 
var dll = ..raw.loadDll($"~\lib\golang\mdns\.go\mdns.dll",,"cdecl");

$ = ..web.json.stringify;
 
query = function(param){
	if(!param.domain) param.domain = "local";
	if(!param.timeout) param.timeout = 2000;
	if(param.wantUnicastResponse===null) param.wantUnicastResponse = false;
	if(!param.service){
		error("查询表参数必须指定 service 字段",2);
	}

	var serverInfos,err;
	var callback = ..raw.jsonCall(
		function(ok,result){ 
			if(ok) serverInfos = result;
			else err = result;
		} 
	); 
	
	dll.Query( $(param),param.max:4,callback )	 
	..raw._release(callback);
	
	if(#serverInfos){
		if(param.name){
			var name = param.name + "."
			return ..table.filter(serverInfos,lambda(v) ..string.startWith(v.name,name) )
		}
	}
	return serverInfos,err;
}

lookup = function(service,max){

	var callback = ..raw.jsonCall(
		function(ok,result){ 
			if(ok) serverInfos = result;
			else err = result;
		} 
	); 
	
	dll.Lookup(service,max,callback ) 
	
	..raw._release(callback);
	return serverInfos,err;
}

scan = function(param){
	param = ..table.mix(param,{
		max = 10;
		timeout = 3000;
	}); 
	
	param.service = "_services._dns-sd._udp";
	return query(param);
}

startService = function(param){
	var err  = dll.StartServiceP($(param))
	if(err){
		var str = ..raw.str(err);
		dll.FreeCString(err);
		
		return null,str;
	}
	
	return true;
}

stopService = function(){
	dll.StopService()
}

getInterfaces = function(){
	var interfaces,err;
	
	dll.GetInterfaces(
		..raw.jsonCall(
			function(r,e){
				interfaces,err = r,e
			} 
		)
	)
	
	if(interfaces) { 
		
		interfaces = ..table.filter(interfaces,lambda(v)(
			(v.Flags&1/*FlagUp*/) && (v.Flags&(1<<4/*FlagMulticast*/)) && !(v.Flags&(1<<2/*FlagLoopback*/)) 
		)  );
		
		if(#interfaces<=1) return interfaces; 
		
		for(i,it in interfaces){
			
			if( ..table.find(it.ips,lambda(ip) ..string.startWith(ip,"192.168.") ) ){
				var local = ..table.remove(interfaces,i);
				..table.unshift(interfaces,local);
				return interfaces;
			}  
		} 
		
	}
	return interfaces,err;
}

/*
Go DLL 需要至少调用 1 个 导出API ，避免 DLL 未初始化直接退出导致的问题
*/
..table.gc(self,function(){
	dll.StopService();
}) 

/**intellisense(golang.mdns)
scan() = 扫描 mDNS 服务，\n查询成功返回服务信息数组，\n失败返回 null，错误信息
query( = mDNS 查询
query(.(param) = mDNS 查询，@param 是指定查询条件的表参数，\n必须用 service 字段指定查询服务类型，例如："_services._dns-sd._udp"\n可选用 domain 字段指定域名，省略则默认为 local，\n可选用 name 字段指定子域名，\n完整服务名为 name + service + domain。\n可选用 timeout 字段指定查询超时，以毫秒为单位，省略则默认为 2 秒。\n可选用 interface 指定使用的网卡名称。\n可调用 golang.mdns.getInterfaces 函数得到所有网卡
getInterfaces() = 返回所有网卡信息数组。\n数组中的网卡信息是表对象，所有字段名首字母大写
lookup( = mDNS 简单查询
lookup(.(service,max) = mDNS 简单查询，\n@service 指定服务名，\n可选用 @max 指定最大允许返回的查询结果数\n\n查询成功返回服务信息数组，\n失败返回 null，错误信息。\n服务器信息包含 name,host,addr,port,info,InfoFields 字段，\nname 为域名，host 为主机名，addr 为 IP 地址数组，port 为端口
startService( = 创建 mDNS 服务
startService(.(param) = @.startService( \n	instance = "实例名";\n	service = "服务名__/*指定要启动的 mDNS 服务名*/";\n	domain = "域名，建议省略，默认为 local.";\n	host = "主机名，建议省略";\n	ips = {"IP地址"};\n	port = 端口;\n	txt = {"文本"}\n)
stopService() = 停止 mDNS 服务
end intellisense**/