namespace fsys.crx;
import protobuf.message;
import util.metaProperty;

class SignedData {
	ctor(reader){
		this = ..protobuf.message(reader);
		
    	this.fieldTypes[1] = "..protobuf.type.bytes";
    	this.fieldValues[1] = null;
    	this.fieldNames[1] = "crxId";
       
	} 
	@_metaProperty ;
}

namespace SignedData {
  
  
	_metaProperty  = ..util.metaProperty(
		_keys = { "crxId" }
		_tostring = function(){
			return owner.serializeToString();
		};
		parseValue = lambda() ..table.parseValue(owner);
		eachName = function(){
			return ..table.eachName(owner); 
		};	
    	crxId = {
    		_get = function(){ 
    			return owner.getFieldValue(1);
    		};
    		_set = function( value ){
    			return owner.setFieldValue(1, value);
    		}; 	
    	}; 
        
	)
}
/**intellisense()
fsys.crx.SignedData = Protobuf 消息对象
fsys.crx.SignedData() = 创建 Protobuf 消息对象。\n!fsys_crx_SignedData.
!fsys_crx_SignedData.parseFromString(__/*字符串*/) = 二进制数据反序列化到消息对象\n此函数自动清空所有数组值,但不会重置其他非数组字段值.\n因此应对新创建的对象调用此函数.
!fsys_crx_SignedData.parseValue() = 调用 table.parseValue 获取纯值表。\n纯值表只包含纯值类型数据，\n纯值类型指的是：字符串、数值、布尔值、buffer、指针、纯值表。\n纯值表要么是数组，要么是包含名值对的表。\n\n纯值表是可保持原值序列化的表，并且兼容 JSON
!fsys_crx_SignedData.serializeToString() = 序列化消息对象,返回二进制字符串
!fsys_crx_SignedData.eachName() = @for k,v in ??.eachName(){
	__/*遍历此消息对象的所有字段，
k 为字段名,v 为字段值。*/
}
!fsys_crx_SignedData.crxId =  16 bytes long.\nprotobuf.type.bytes
end intellisense**/