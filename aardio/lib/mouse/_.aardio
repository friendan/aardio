import win; 
namespace mouse;

var function yToDy( y ){
	return  ..math.ceil(   y * (65535 / ::User32.GetSystemMetrics(1/*_SM_CYSCREEN*/))  ) ;
}

var function xToDx( x ){
	return  ..math.ceil( x * (65535 / ::User32.GetSystemMetrics(0/*_SM_CXSCREEN*/)) );
} 

class INPUTDATA{
    INT type; 
    union input = {
        struct  mi = MOUSEINPUT(); 
    };
} 

class INPUTDATA.MOUSEINPUT{
    INT dx;
    INT dy;
    INT mouseData;
    INT dwFlags;
    INT time;
    INT dwExtraInfo;
} 
extraInfo = 0;

var getPointArgs;
getPointArgs = function(x=0,y=0,abs){ 
	if(type(x)=="table"){
		if(abs===null) abs = 1;
		if(x.left!==null) {
			y = x.top + x.height()/2;
			x = x.left + x.width()/2;
		}
		elseif(x.Left!==null) {
			y = x.Top + x.Height/2;
			x = x.Left + x.Width/2;
		}
		elseif(x.x!==null) {
			if(x.height!==null){
				y = x.y + x.height/2;
				x = x.x + x.width/2;	
			} 
			else {
				y = x.y;
				x = x.x;		
			}
		}
		elseif(x.BoundingRectangle){
			return getPointArgs(x.BoundingRectangle,,abs);
		}
		else error("错误的坐标参数类型",3);
	}
    
	if(!abs) { 
		var pt = ::POINT() ;
		::User32.GetCursorPos(pt);

		x  = pt.x + x;
		y = pt.y + y; 
	}
	elseif(type(abs)=="table"){
		
		if(abs.left!==null) {
			y = abs.top + y;
			x = abs.left + x;
		}
		elseif(abs.Left!==null) {
			y = abs.Top + y;
			x = abs.Left + x;
		}
		elseif(abs.x!==null) { 
			y = abs.y + y;
			x = abs.x + x;	 
		}
		elseif(abs.BoundingRectangle){
			return getPointArgs(x,y,abs.BoundingRectangle);
		}
	}
	
	return x,y;
}


//处理鼠标事件( x坐标,y坐标,是否绝对坐标值,事件标志 )
var send;
send = function( x, y, abs , dwFlags = 0,mouseData = 0){
	x,y = getPointArgs(x,y,abs);

 	var sendData = {
		struct array[] = {}
	} 
	sendData.array[1] = INPUTDATA(); 
    sendData.array[1].type = 0/*_INPUT_MOUSE*/;
    
    var input = sendData.array[1].input;
    
    if( ! mouseData ) { 
		input.mi.dx  = xToDx(x)+1;
		input.mi.dy = yToDy(y)+1;
		input.mi.dwFlags =  0x1/*_MOUSEEVENTF_MOVE*/ | dwFlags | 0x8000/*_MOUSEEVENTF_ABSOLUTE*/;
	}
	else{ 
    	input.mi.dwFlags = 0x800/*_MOUSEEVENTF_WHEEL*/
    	input.mi.mouseData = mouseData;
	}
	input.mi.dwExtraInfo = extraInfo;
	
	::User32.SendInput(1,  sendData, ..raw.sizeof( sendData ) ) ;
 }
 
 var waitCmd = function( vkeyCode ){
     
 	//必须放开
	while( ( ::GetAsyncKeyState( vkeyCode ) < 0))  {
		..thread.delay(1)
	}
	
     //必须按下
 	while( ::GetAsyncKeyState( vkeyCode ) >= 0 ) {
 			..thread.delay(1)
	}
	
	//必须再次放开
	while( ( ::GetAsyncKeyState( vkeyCode ) < 0))  {
		..thread.delay(1) //就一直等待
	}
  
 }
 
 var dbSpanTk = ::User32.GetDoubleClickTime() +  10;
 var waitCmdDb = function(vk){
     
	if(dbSpanTk < 300)
		dbSpanTk = 300;

	var nTick ,nTick_new = 0 , 0; 
	var pt ,pt_new  = ::POINT() ,::POINT()

	while( true ) {
		waitCmd( vk );
		var nTick_new = ..time.tick();
		if(( nTick_new - nTick )  < dbSpanTk ) {
				break;
		}
			
		nTick = nTick_new; 
		..thread.delay(1);
	}
}

delayDown = 5;
delayUp = 1;
delayDb =10;
delayMove = 5
delayClick = 10;

var downDelay = function(){
	..thread.delay( delayDown )
}
var upDelay = function(){
	..thread.delay( delayUp )	
}
var dbDelay = function(){
	..thread.delay( delayDb )	
}
var clickDelay = function(){
	if( delayClick > delayUp )
		..thread.delay( delayClick - delayUp )	
}
  

getPos = function(){
	var ptCurPos = ::POINT();
	::User32.GetCursorPos(ptCurPos);
	return ptCurPos.x,ptCurPos.y;
}

setPos = function( x=0, y=0 ){
	::User32.SetCursorPos( x, y );
}

state = function(){
	return  GetAsyncKeyState(1) < 0;
} 

wait  = function(){
	waitCmd( 1 );
}
	
waitDb = function(){
	waitCmdDb( 1 ); 
}

moveTo = function(x2,y2,abs,step=8,tk=2)	{ 
	x2,y2 = getPointArgs(x2,y2,abs);
	var x1,y1 = getPos();

	var x,y;
	var xx = x2-x1;
	var yy = y2-y1;
	var k;
	if(..math.abs(xx) > ..math.abs(yy) ) {
		if(x2<x1) 
			step = -step;
		k = yy / xx ; //计算斜率
		for x=x1;x2;step {
				y = k * (x - x1) + y1  
				send( x,y, 1, 0x1/*_MOUSEEVENTF_MOVE*/ );
				..thread.delay(tk)
		} 
	}
	else {
		if(y2<y1) 
			step = -step;
		k = xx / yy  //计算斜率
		for y=y1;y2;step {
				x = k * (y - y1) + x1  
				send( x,y, 1, 0x1/*_MOUSEEVENTF_MOVE*/ );
				..thread.delay(tk)
		} 
	} 
	send( x2,y2, 1, 0x1/*_MOUSEEVENTF_MOVE*/ );
	return x2,y2;
} 

drag = function(x2,y2,abs,step,tk){
	down()
	moveTo(x2,y2,abs,step,tk)
	up()
}

moveToWindow = function(x,y,hwnd,step,tk){
	//窗口最小化的伪坐标为 -32000 这种超大的值
	if(::User32.IsIconic(..win.getRoot(hwnd))) return;

	var x2,y2 = ..win.toScreen(hwnd,x:0,y:0);
	if(step===null){
		return move(x2,y2,true);
	}
	return moveTo(x2,y2,true,step,tk:2);
}

move = function( x=0, y=0, abs ){
	send( x, y, abs, 0x1/*_MOUSEEVENTF_MOVE*/ );
	..thread.delay(delayMove);
}

down = function( x=0,y=0,abs ){
	send( x, y, abs,0x2/*_MOUSEEVENTF_LEFTDOWN*/ );
	downDelay();
} 

up = function( x=0,y=0,abs ){
	send( x, y, abs,0x4/*_MOUSEEVENTF_LEFTUP*/ );
	upDelay()
}

click = function( x=0,y=0,abs ){
	down( x,y,abs);
	up( x,y,abs);
	clickDelay()
}

clickDb = function( x=0,y=0,abs ){
	down( x,y,abs);
	up( x,y,abs);
	dbDelay()
	down( x,y,abs);
	up( x,y,abs);
	clickDelay()
}

namespace mb begin
	wait = function(){
		waitCmd( 4 );
	}
	
	waitDb = function(){
		waitCmdDb( 4 ); 
	}
	
	state = function(){
		return  GetAsyncKeyState(4) < 0;
	} 

	down = function(x=0,y=0,abs ){
		send(x,y,abs, 0x20/*_MOUSEEVENTF_MIDDLEDOWN*/);
		downDelay()
	}
		
		
	up = function(x=0,y=0,abs ){
		send(x,y,abs, 0x40/*_MOUSEEVENTF_MIDDLEUP*/);
		upDelay()
	} 
		
	click = function( x=0,y=0,abs ){
		down(x,y,abs);
		up(x,y,abs);
		clickDelay()
	}
	
	
	roll = function( x = -120 ){
		send(,,,,x); 
		clickDelay()
	}
end;

namespace rb begin
	wait = function(){
		waitCmd( 2 );
	}
	
	waitDb = function(){
			waitCmdDb( 2 ); 
	}
	
	state = function(){
		return  GetAsyncKeyState(2) < 0;
	} 
	
	down = function(x=0,y=0,abs ){
    	send(x,y,abs, 0x8/*_MOUSEEVENTF_RIGHTDOWN*/);
    	downDelay()
	}
		
	up = function(x=0,y=0,abs ){
    	send(x,y,abs, 0x10/*_MOUSEEVENTF_RIGHTUP*/);
    	upDelay()
	} 
		
	click = function(x=0,y=0,abs ){
		down(x,y,abs);
		up(x,y,abs);
		clickDelay()
	}
		
	clickDb = function(x=0,y=0,abs ){
		down(x,y,abs);
		up(x,y,abs);
		dbDelay()
		down(x,y,abs);
		up(x,y,abs);
		clickDelay()
	}
end;

/**details(必读)
mouse 库所有函数的前三个参数基本都是:x,y,abs
其中 @x,@y 参数指定坐标，@abs 参数指定是否绝对坐标。
例如 mouse.click(x,y,abs);

上面的 3 个参数都可以用一个 @rect 参数代替。
例如 mouse.click(rect);

此时@rect 支持 ::RECT,::RECTF,::Point 结构体，兼容 .NET 的 Rect,Point 等提供相同字段的结构体。
@rect 参数也可以指定提供 BoundingRectangle 属性的 UIA 控件对象。
指定 @rect 参数时默认为绝对坐标。

另外也可以用 @rect 代替 @abs 参数以指定相对坐标的屏幕参考位置。
@rect 参数同样兼容前述的各种结构体与 UIA 控件对象。
end details**/

/*intellisense(mouse)
extraInfo = 发送消息的自定义附加值\n该值会传入鼠标钩子的extraInfo参数
delayDown = 鼠标键按下延时,默认为5毫秒;
delayUp = 鼠标弹起延时,默认为1毫秒
delayDb = 鼠标键双击间隔时间,默认为10毫秒;
delayMove = move函数鼠标移动间隔时间,默认为5毫秒
delayClick = 鼠标击键延时,默认为10毫妙
getPos() = 返回鼠标当前坐标(x,y)
setPos(.(x,y) = 设置鼠标位置
move(.(x,y) = 移动到相对坐标 x,y
move(.(x,y,true) = 移动到绝对坐标 x,y
move(.(x,y,rect) = 按相对于 rect 指定屏幕位置的相对坐标 x,y 移动。\n@rect 参数支持 ::RECT,::RECTF,::Point 结构体，\n兼容 .NET 的 Rect,Point 等提供相同字段的结构体，支持用 UIA 控件对象作为参数
move(.(rect) = 移动到参数 @rect 指定的屏幕位置中间。\n@rect 支持 ::RECT,::RECTF,::Point 结构体，\n兼容 .NET 的 Rect,Point 等提供相同字段的结构体
moveToWindow( = 移动到指定窗口的客户区坐标（客户区不包含标题栏）。
moveToWindow(.(x坐标,y坐标,窗口句柄,步进,延时) = 移动到指定窗口客户区坐标（单位为像素，客户区不包含标题栏）。\n步进（单位为像素），延时（单位为毫秒）参数可省略，如果指定步进则显示移动轨迹。
moveTo( = 移动鼠标并显示移动轨迹
moveTo(.(x,y) = 移动到相对坐标 x,y,显示移动轨迹
moveTo(.(x,y,true) = 移动到绝对坐标 x,y,显示移动轨迹 
moveTo(.(x,y,rect) = 按相对于 rect 指定屏幕位置的相对坐标 x,y 移动。\n@rect 参数支持 ::RECT,::RECTF,::Point 结构体，\n兼容 .NET 的 Rect,Point 等提供相同字段的结构体，支持用 UIA 控件对象作为参数
moveTo(.(x坐标,y坐标,是否绝对坐标,步进,延时) = 移动显示移动轨迹。\n步进（单位为像素），延时（单位为毫秒）参数可省略
moveTo(.(rect) = 移动到参数 @rect 指定的屏幕位置中间。\n@rect 参数支持 ::RECT,::RECTF,::Point 结构体，\n兼容 .NET 的 Rect,Point 等提供相同字段的结构体，支持用 UIA 控件对象作为参数
drag(.(x,y) = 按相对坐标拖动鼠标
drag(.(x,y,true) = 按绝对坐标拖动鼠标
drag(.(x,y,true,步进) = 按绝对坐标拖动鼠标
drag(.(x,y,true,步进,延时) = 按绝对坐标拖动鼠标
down() = 左键按下
up() = 左键弹起
down(x,y) = 左键在相对坐标按下
up(x,y) = 左键在相对坐标弹起
down(x,y,true) = 左键在绝对坐标按下
up(x,y,true) = 左键在绝对坐标弹起
click(.(x,y) = 左键在相对坐标单击\n省略参数在当前位置单击
click(.(x,y,true) = 左键在绝对坐标单击\n省略参数在当前位置单击
click(.(x,y,rect) = 在相对于 rect 指定屏幕位置的相对坐标 x,y 单击左键。\n@rect 参数支持 ::RECT,::RECTF,::Point 结构体，\n兼容 .NET 的 Rect,Point 等提供相同字段的结构体，支持用 UIA 控件对象作为参数
click( =  左键单击\n省略参数在当前位置单击
click(.(rect) = 左键在参数 @rect 指定的屏幕位置中间单击。\n@rect 支持 ::RECT,::RECTF,::Point 结构体，\n兼容 .NET 的 Rect,Point 等提供相同字段的结构体。\n@rect 参数也可指定提供 BoundingRectangle 属性的 UIA 控件对象。\n\n注意：mouse 库所有函数的坐标参数都可以用 @rect 代替坐标。\n指定 @rect 时默认为绝对坐标
clickDb() = 左键双击 
clickDb(x,y) = 左键在相对坐标双击 
clickDb(x,y,true) = 左键在绝对坐标双击
wait() = 等待左键单击
waitDb() = 等待左键双击
state() = 左键是否按下
end intellisense*/

/*intellisense(mouse.mb)
move(.(x,y) = 按相对坐标移动
move(.(x,y,true) = 按绝对坐标移动
down() = 中键按下
up() = 中键弹起
down(x,y) = 中键在相对坐标按下
up(x,y) = 中键在相对坐标弹起
down(x,y,true) = 中键在绝对坐标按下
up(x,y,true) = 中键在绝对坐标弹起
click() = 中键单击 
click(x,y) = 中键在相对坐标单击 
click(x,y,true) = 中键在绝对坐标单击
clickDb() = 中键双击 
clickDb(x,y) = 中键在相对坐标双击 
clickDb(x,y,true) = 中键在绝对坐标双击
roll(-10__) = 参数为负数向下滚,正数向上滚动
wait() = 等待中键单击
waitDb() = 等待中键双击
state() = 中键是否按下
end intellisense*/

/*intellisense(mouse.rb)
move(.(x,y) = 按相对坐标移动
move(.(x,y,true) = 按绝对坐标移动
down() = 右键按下
up() = 右键弹起
down(x,y) = 右键在相对坐标按下
up(x,y) = 右键在相对坐标弹起
down(x,y,true) = 右键在绝对坐标按下
up(x,y,true) = 右键在绝对坐标弹起
click() = 右键单击 
click(x,y) = 右键在相对坐标单击 
click(x,y,true) = 右键在绝对坐标单击
clickDb() = 右键双击 
clickDb(x,y) = 右键在相对坐标双击 
clickDb(x,y,true) = 右键在绝对坐标双击
wait() = 等待右键单击
waitDb() = 等待右键双击
state() = 右键是否按下
end intellisense*/