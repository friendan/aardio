import inet.url;
import util.metaProperty;
import util.registry;
import web.json;
import win.reg;
import wsock;
import string.args; 

namespace web

class view {
	ctor( winform,createBrowserOptions,browserArguments,...){{
		if(!_WIN10_LATER) return;
		
		if(!checkRuntime(winform)) return;
		if(!winform) winform = ..win.form().messageOnly();
		 
		if(type.isString(createBrowserOptions)){
			createBrowserOptions = {
				userDataDir = createBrowserOptions;
			}
		}
		elseif(!createBrowserOptions) createBrowserOptions = {};
		elseif(type(createBrowserOptions)!="table") error("参数 @2 必须是表对象或字符串",2);
		
		if(!createBrowserOptions.userDataDir){
			createBrowserOptions.userDataDir = ..io.appData("/aardio/webview2/user-data/" + ..io._exefile);
		}
		
		if(!browserArguments) browserArguments = createBrowserOptions.startArguments;
		
		if(browserArguments!==null){
			if(type(browserArguments)=="number"){
				if(!browserArguments) browserArguments = ..wsock.getFreePort("127.0.0.1");
				browserArguments = "--remote-debugging-port=" + browserArguments;
			} 
			
			browserArguments = ..string.args.joinEx(true,"=",false,browserArguments,...);
			
			this.remoteDebuggingPort = ..string.match(browserArguments,"\-\-remote\-debugging\-port\=(\d+)");
			if(this.remoteDebuggingPort) this.remoteDebuggingPort = tonumber(this.remoteDebuggingPort);
		 
			if(!..string.find(browserArguments,"--remote-allow-origins") ) {
				browserArguments = browserArguments + " --remote-allow-origins=http://127.0.0.1";
			}
		}
		else {
			browserArguments = self.browserArguments;
			if(type(browserArguments) == "function") browserArguments = browserArguments()
			
			if(type(browserArguments)==="table"){
				browserArguments = ..string.args.joinEx(true,"=",false,browserArguments,...);
			}
		}
		
		var browser = _dll.webview_newP();
		this.browser = browser;
		
		var hr = _dll.webview_createW(browser,{
  				addr window = winform.hwnd;
  				ustring userDataDir = ..io.fullpath(createBrowserOptions.userDataDir);
  				ustring language = createBrowserOptions.language;//例如 "zh-CN" 格式参考 ..sys.locale 库
  				ustring startArguments = browserArguments;
  				
  				//浏览器最低兼容版本: https://aka.ms/webviewrelease 不能低于 "86.0.616.0"
  				ustring compatibleBrowserVersion = createBrowserOptions.compatibleBrowserVersion || "86.0.616.0";
  				bool extensions = createBrowserOptions.extensions;
			} )
			
		if( hr < 0/*_FAILED*/){
			return null,..lasterr(hr);
		}
		this.userDataDir = createBrowserOptions.userDataDir;
		
		winform._onDestroy = function(){
			if(this.browser){
				_dll.webview_destroy(this.browser);	
				this.browser = null;
				browser = null;
			}
		}
		
		winform.onEraseBkgnd  = lambda() 0; 
		
		//避免回调函数指针被提前回收
		this._cdpEventGC = {};
		this._cdpCallbackGC = {};
		this._jsCallbackGC = {};
		
		this.export = function(name,callback){
			if(!this.browser) return;
			if(type(name)==="table"){
				for k,v in ..table.eachName(name){ 
					if(type(v)==="function"){
						this.export(k,v);
					}
				}
				
				return;
			}
			
			if(type(name)!=="string") error("参数@1必须是字符串",2);
			if((type(callback)!=="function")&&(type(callback)!=="class") ) error("参数@2必须是函数",2);
			
			this._jsCallbackGC[name] = ..raw.tocdecl(function(seq,req,arg){
				var ok,ret;
				
				if(req){
					req = ..web.json.parse(req);
					ok,ret = call(callback,this,..table.unpackArgs(req))	
				}
				else {
					ok,ret = call(callback,this)		
				}
				
				if(!ok){
					if(ret) errput(ret); 
					_dll.webview_do_script(this.browser,"window._rpc[" + seq + "].reject(" + ..web.json.stringify(ret) + "); window._rpc[" +  seq + "] = undefined",null);
					return;
				}
				
				if(ret!==null){  
					_dll.webview_do_script(this.browser,"window._rpc[" + seq + "].resolve(" + ..web.json.stringify(ret) + "); window._rpc[" +  seq + "] = undefined",null);
				}
			}
			,"void(string seq,string req,ptr arg)")
			
			_dll.webview_bind(this.browser,name,this._jsCallbackGC[name],null); 
		};

		if(!winform.wait( function(){
			if(browser && _dll.webview_ready(browser)){ 
				this._jsEvalCallback = ..util.registry();
				this.export(
					$aardioEvalCallback = function(result,err,callbackId){
						var cb = this._jsEvalCallback.unReg(callbackId);
						if(cb){ cb(result,err); }
					};
					$aardioDocumentLoad = function(url){
						var r = this._jsEvalCallback;
						for(i,cb in r){
							if(type(i)=="number") {
								cb(null,"DOCUMENT_CLOSED");
								r[i] = null;
							}
						}
						
						this.$readyUrl = url;
						if(this.onDocumentInit)this.onDocumentInit(url);
					};
				);
				
				_dll.webview_set_size(browser);
				_dll.webview_init(browser,"
				window.external={invoke:s=>window.chrome.webview.postMessage(s)};
				window.external.waitEle = function(selector, timeout, frequency){return new Promise((resolve, reject) => {var b = Date.now();(function retry() {let el = document.querySelector(selector);if (el != null) { resolve(el);}else {setTimeout(function () {let ms;if (timeout && (ms = Date.now() - b) > timeout) { reject('Promise timed out after ' + ms + ' ms');  }else{  retry();} }, frequency || 200);}})();})};
				if(top==self)$aardioDocumentLoad(location.href);")
				return true;
			}
		},,300)) return;
		
		_dll.webview_setIsStatusBarEnabled(this.browser,false);
		_dll.webview_setVisible(this.browser,true)
		
		winform.adjust = function( cx,cy,wParam ) {	 
			_dll.webview_set_size(browser); 
		};
		
		this._form = winform;
		this.hwndChrome = ..win.getChild(winform.hwnd); 
	} };
	adjust = function(){
		if(!this.browser) return;
		_dll.webview_set_size(this.browser);
	};
	go = function(url,devPort,timeout){ 
		
		if(!this.browser) return; 
		if(_STUDIO_INVOKED && devPort){
			global.import("web.view.dev");
			..web.view.dev(this,url,devPort,timeout);
		}
		else {
			this.$location = ..io.localpath(url) : url;
			var path,extraInfo = ..string.match(url,"([^\#\?]+)(.*)"); 
			
			if(..io.localpath(path)){ 
				
				if(..wsock[["tcp"]][["asynHttpServer"]]){
					if(!this.asynHttpServer){
						this.asynHttpServer = ..wsock.tcp.asynHttpServer();
						this.asynHttpServer.start("127.0.0.1");
					}
					
					var tPath = ..io.splitpath(path);
					if( ..string.cmp(tPath.file, "index.html")==0
						|| ..string.cmp(tPath.file, "index.aardio")==0){
						this.$location = this.asynHttpServer.spaUrl(..string.concat(tPath.file,extraInfo),tPath.dir);
					} 
					else {
						this.$location = this.asynHttpServer.spaUrl(url);
					} 
				}
				elseif(..wsock[["tcp"]][["simpleHttpServer"]]){
					var tPath = ..io.splitpath(path);
					if( ..string.cmp(tPath.file, "index.html")==0
						|| ..string.cmp(tPath.file, "index.aardio")==0){
						this.$location = ..wsock.tcp.simpleHttpServer.startSpaUrl(..string.concat(tPath.file,extraInfo),tPath.dir);
					}
					else {
						this.$location = ..wsock.tcp.simpleHttpServer.startSpaUrl(url);
					} 
				}
				elseif(extraInfo && ..io.exist(path) ){
					this.$location = "file:///" + ..io.fullpath(path) + extraInfo;
				} 
			}
			elseif(extraInfo && ..io.exist(path) ){
				this.$location = "file:///" + ..io.fullpath(path) + extraInfo;
			} 

			var urlPath,extraInfo = ..string.match(this.$location,"([^\#]+)(.*)"); 
			if(this.$readyUrl && #extraInfo){ 
				readyPath = ..string.match(this.$readyUrl,"([^\#]+)"); 
				  
				if(..inet.url.cmp(urlPath,readyPath)==0 ){ 
					var path = ..string.match(urlPath,"([^\?]+)"); 
					if(..string.endWith(path,".pdf",true)){ 
						
						//https://github.com/MicrosoftEdge/WebView2Feedback/issues/2409
						_dll.webview_navigate(this.browser, "about:blank");
					 
						this.$readyUrl = null;
						this._form.wait(function(){
							return this.$readyUrl;
						},,10);  
					}
					else{
						_dll.webview_navigate(this.browser, this.$location);
						..thread.delay(500); 
						return;
					}
				}
			} 

			this.$readyUrl = null;
			_dll.webview_navigate(this.browser, this.$location); 
			
			this._form.wait(function(){
				return this.$readyUrl;
			});
		}
	};
	preloadScript = function(js){
		if(!this.browser) return; 
		_dll.webview_init(this.browser,"(function(){"+js+"})()")
	};
	doScript = function(js,callback,cbOwner){
		if(!this.browser) return; 
			
		if(type(callback)=="function"){
			var callbackCdecl;
			callbackCdecl = ..raw.tocdecl(function(err,json){
				if(!err){
					var r,e = call(callback,cbOwner,jsonTryParse(json));
					if(!r){ errput(e:"ExecuteScript failed","WebView") }
				}
				else {
					errput("ExecuteScript failed","WebView")
				}
				 
				this._form.setTimeout(
					function(){
						..raw._release(callbackCdecl);
						this._jsCallbackGC[callbackCdecl] = null; 
					},0
				)
			},"void(int errCode,ustring json)")
			
			this._jsCallbackGC[callbackCdecl] = callback;
			return _dll.webview_do_script(this.browser,js,callbackCdecl); 
		}
		
		return _dll.webview_do_script(this.browser,"(function(){"+js+'\n})()',null)
	};
	eval = function(js,...){
		if(!this.browser) return;  
		if(...) js = ..string.format(js,...);
		
		var done;
		var result;
		var callback = ..raw.tocdecl(function(err,json){
			if(!err){
				result = jsonTryParse(json);
				done = true;
			}
			else {
				done = false;
			}
		},"void(int errCode,ustring json)")
		
		_dll.webview_do_script(this.browser,"("+js+")",callback) 
		..win.wait(lambda() done,winform.hwnd,,5);
		 
		..raw._release(callback);
		return result;
	};
	xcall = function(method,...){ 
		/*
		能调用非阻塞的 webView.invoke ，就尽量不要用阻塞的 webView.xcall，webView.eval
		在被网页回调 aardio 函数内部，直接调用 webView.xcall，webView.eval 可能会导致阻塞后续调用。
		此时应当改用 webView.invoke，或者通过 winform.setTimeout 异步调用 webView.xcall，webView.eval 。
		*/
		var jsThis = "null";
		if(!..string.find(method,"[\r\n\;\{\}\(\)]")){
			jsThis = ..string.match(method,"(.+)\.[^.]+$") : "null";
		}
		
		var js  = "(" + method + ").apply(" + jsThis + "," + ..web.json.stringifyArray({...}) + ")";
		return this.eval(js);
	}; 
	invoke = function(method,...){
		var jsThis = "null";
		if(!..string.find(method,"[\r\n\;\{\}\(\)]")){
			jsThis = ..string.match(method,"(.+)\.[^.]+$") : "null";
		}
		
		var js  = "(" + method + ").apply(" + jsThis + "," + ..web.json.stringifyArray({...}) + ")";
		_dll.webview_do_script(this.browser,js,null)
	};
	waitEle = function(selector,callback,timeout){
		if(!this.browser) return; 
		
		if(type.isString(callback)){
			_dll.webview_do_script(this.browser,"external.waitEle('"+selector+"',"+(timeout:0)+").then( (el)=>{ ((function(){"+callback+'\n}).bind(el))() } )',null) 
		}
		elseif(callback){
			var callbackId = this._jsEvalCallback.reg(callback); 
			_dll.webview_do_script(this.browser,"external.waitEle('"+selector+"',"+(timeout:0)+").then( ()=>{ window.$aardioEvalCallback('"+selector+"',null,"+callbackId+")} ).catch( (e)=>{ window.$aardioEvalCallback(null,e,"+callbackId+")} )",null) 
		}
		else {
			var url = this.$readyUrl;
			var resultOk,resultErr;
			this.waitEle(selector,function(ok,err){
				resultOk,resultErr = ok,err;
			},timeout)
			
			return this._form.wait(function(){
				if(this.$readyUrl!=url) return null,"页面已跳转";
				return resultOk,resultErr;
			},,timeout); 
		} 
	};
	wait = function(p,timeout){ 
		return this._form.wait(function(){
			var url = this.$readyUrl; 
			if( url ? (!p || ..string.find( url,p)) ) {
				if(this.eval("document.readyState == 'interactive' || document.readyState == 'complete' ") )
					return url; 
			}
		},timeout,200);
	}; 
	waitDoc = function(p,timeout){  
		return this._form.wait(function(){
			var ret = this.eval(p ? "document.readyState == 'complete' " : "document.readyState == 'interactive' || document.readyState == 'complete' ");
			if( ret ) return true; 
		},timeout,500);
	};  
	waitUrlParam = function(p,k,timeout){ 
		return this._form.wait(function(){ 
			var url = this.$readyUrl; 
			if( url ? ..string.find( url,p) ) {
				if(this.eval("document.readyState == 'interactive' || document.readyState == 'complete' ") )
					return ..inet.url.getParams(url,k); 
			}
		},timeout);
	};
	cdp = function(name,param,callbackArg){
		if(!this.browser) return;  
		if(!type.isString(param)) param = param?..web.json.stringify(param):"{}";
	 
		var err;
		var result;
		var callbackCdecl;
		callbackCdecl = ..raw.tocdecl(function(errCode,json){ 
			if(!errCode){
				result = jsonTryParse(json); 
				err = 0;
			}
			else {
				err = errCode; 
			}
			
			if(callbackArg){
				callbackArg(result,err); 
				
				this._form.setTimeout(
					function(){
						..raw._release(callbackCdecl);
						this._cdpCallbackGC[callbackCdecl] = null; 
					},0
				)
			}
		},"void(int errCode,ustring json)")
 
		var hr = _dll.webview_callDevToolsProtocolMethod(this.browser,name,param,callbackCdecl);
		if(hr) return null,hr;
		
		if(callbackArg){
			this._cdpCallbackGC[callbackCdecl] = callbackArg; 
			return true;
		}

		..win.wait(lambda() err,winform.hwnd,,5); 
		..raw._release(callbackCdecl);
		
		if(!err) return result; 
		return null,err;
	};
	cdpWait = function(name,param,timeout){
		var r,e = this._form.wait(function(){
			return this.cdp(name,param)
		},,timeout); 
		
		if(e=="Timeout!" ) e = 0x102/*_WAIT_TIMEOUT*/;
		return r,e; 
	};
	cdpQuery = function(selector,parent,callback){
		if(!parent){
			parent = this.cdp("DOM.getDocument")[["root"]];
			if(!parent) return;
		}
		
 		return this.cdp("DOM.querySelector",{
			selector = selector;
			nodeId = parent[["nodeId"]] : parent;
		},callback)
	};
	cdpWaitQuery = function(selector,parent,timeout){
		var r,e =  this._form.wait(function(){
			return this.cdpQuery(selector,parent)
		},,timeout); 
		
		if(e=="Timeout!" ) e = 0x102/*_WAIT_TIMEOUT*/;
		return r,e; 
	};
	cdpSubscribe = function(eventName,callback){
		if(this._cdpEventGC[eventName]){
			_dll.webview_removeDevToolsProtocolEventReceivedW(this.browser,eventName,this._cdpEventGC[eventName].token);
			..raw._release(this._cdpEventGC[eventName].callback);
			this._cdpEventGC[eventName] = null;
		}
		
		if(callback){
			
			var callbackCdecl = ..raw.tocdecl(function(json){
				var ret  = callback( ..web.json.parse(json) );
				if(type(ret) === "function"){
					this._form.setTimeout(ret,0)
				}
			}
			,"void(ustring)");
			var	token = {long value};
			var ret = _dll.webview_addDevToolsProtocolEventReceivedW(this.browser,eventName,token,callbackCdecl);
		
			this._cdpEventGC[eventName] = {
				callback = callbackCdecl;
				token = token;
			}
		}
	};
	exportHostObject = function(name,object){
		if(!this.browser) return;
		
		var t = type(object);
		if(!..com.IsObject(object) ){
			if( t==type.table || t == type.function ){
				object = ..com.ImplInterface(object);
			}	
		} 
			
		var v = ..com.Variant(object)
		_dll.webview_addHostObjectToScriptW(this.browser,name,v);
		..com.Release(v);
	};
	openRemoteDebugging = function(){
		if(!this.remoteDebuggingPort){
			error("创建浏览器对象时未指定调试端口",2)
		}
		
		if(!..web[["socket"]][["chrome"]]){
			error("请先导入 web.socket.chrome",2)
		}
		
		var ws = ..web.socket.chrome(); 
		ws.rpc.originUrl = "http://127.0.0.1";
		
		if( this._form.wait(
			function(){
				return ws.connectFirstDebuggingPage(this.remoteDebuggingPort);
			} 
		) ){
			if( ws.waitForConnected(this._form.hwnd) ) return ws;
		}
	};
	setTimeout = function(...){
		return this._form.setTimeout(...);
	};
	@_metaProperty;
}

namespace view{
	_metaProperty = ..util.metaProperty( 
	
		_serialize = ..thread._callableSerialize;
		
		html = {
			_set = function( html ){  
				var err;
				html,err = ..string.loadcode( html,owner ); 
				if(err) error(err,2);
				
				owner.$readyUrl = null;
				_dll.webview_navigateToString(owner.browser, html);
				
				var this = owner;
				this._form.wait(function(){
					return this.$readyUrl;
				});
			} 
			_get = function(){
				return owner.eval("document.body.outerHTML");
			} 	
		}; 
		external = {
			_set = function( object ){ 
				if(object && !owner.__initExternalObject__){
					owner.__initExternalObject__ = true;
					owner.preloadScript("window.aardio = chrome.webview.hostObjects.external;")
				}
				owner[["externalHostObject"]] = object;
				owner.exportHostObject( "external",object);
			} 
			_get = function(){
				return owner[["externalHostObject"]];
			}	
		}; 
		fullscreen = lambda(v) owner._form.fullscreen(v);
		onFullScreen = {
			_set = function( callback ){ 
				owner[["(onFullScreen)"]] = callback;
				owner[["(onFullScreenStdcall)"]] = callback ? ..raw.tocdecl(owner[["(onFullScreen)"]],"void(bool)",owner); 
				_dll.webview_addContainsFullScreenElementChanged(owner.browser,owner[["(onFullScreenStdcall)"]]);
			} 
			_get = function(){
				return owner[["(onFullScreen)"]];
			}	
		}; 
		onNewWindow = {
			_set = function( callback ){ 
				owner[["(onNewWindow)"]] = function(url){
					var ret,handled  = callback(url);
					if(type(ret)=="function"){
						owner._form.setTimeout(ret,0);
						return handled===null?true:handled; 
					}
					
					return ret;
				} 
				owner[["(ononNewWindowStdcall)"]] = callback ? ..raw.tocdecl(owner[["(onNewWindow)"]],"bool(ustring)",owner); 
				_dll.webview_addNewWindowRequested(owner.browser,owner[["(ononNewWindowStdcall)"]]);
			} 
			_get = function(){
				return callback;
			}	
		}; 
		
		location  = {
			_set = function( url ){ 
				if(owner[["$readyUrl"]]){
					owner.doScript( `location.href="`+url+`"`);
					return;
				}
				
				owner.go(url);
			} 
			_get = function(){
				return owner[["$readyUrl"]] || owner[["$location"]];
			}	
		}; 
		isVisible = {
			_set = function( v ){ 
				_dll.webview_setVisible(owner.browser,v)
			} 
			_get = function(){
				return _dll.webview_getVisible(owner.browser)
			}	
		}; 
		defaultBackgroundColor = {
			_set = function( c ){ 
				owner[["(defaultBackgroundColor)"]] = c;
				_dll.webview_setDefaultBackgroundColor(owner.browser, c>> 16 & 0xFF, c>> 8  & 0xFF,c  & 0xFF,c>> 24 & 0xFF)
			}
			_get = function(){
				return owner[["(defaultBackgroundColor)"]] : 0xFFFFFFFF;
			}	
		}; 
		notifyPositionChanged = function(){
			_dll.webview_notifyParentWindowPositionChanged(owner.browser)
		};
		enableDevTools = function(enabled){
			_dll.webview_setAreDevToolsEnabled(owner.browser,enabled);
		}; 
		enableStatusBar = function(enabled){
			_dll.webview_setIsStatusBarEnabled(owner.browser,enabled);
		};
		enableDefaultContextMenus = function(enabled){
			_dll.webview_setAreDefaultContextMenusEnabled(owner.browser,enabled);
		};
		loadExtension = function(path){ 
			if(..chrome[["extensions"]]){
				if(!..io.exist(path)){
					var info = ..chrome.extensions.find(path);
					path = info[["fullpath"]];
				}
			}
			
			path = ..io.exist(path);
			if(!path) return null,"文件不存在";
			
			var hr = _dll.webview_loadExtensionW(owner.browser,path); 
			if(!hr) return true;
			
			if(hr&0x80070032 /*_ERROR_NOT_SUPPORTED*/){
				error("创建 web.view 对象的第 2 个参数必须指定 extensions 字段的值为 true",2);
			}
			
			return false,..lasterr(hr);
		};
		focus = function(){
			..win.setFocus( owner.hwndChrome );
		};
	) 
	
	//https://docs.microsoft.com/en-us/microsoft-edge/webview2/concepts/distribution#understand-the-webview2-runtime-and-installer-preview
	getRuntimeInfo = function(path){
		
		if(!path){
			return getRuntimeInfo("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}")
				|| getRuntimeInfo("HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}")
		}
								
		var reg = ..win.reg(path);
		if(reg){
			var location = reg.queryValue("location")
			var version = reg.queryValue("pv")
			reg.close();
			
			if(#location && #version && ..string.find(version,"[^0\.]") ){
				return { location = location; version = version; }	
			} 
		}	
	} 
	
	checkRuntime = function(winform){
		if(getRuntimeInfo()) return true; 
		return installRuntime(winform);
	}
	
	installRuntime = function(winform){
		 
		//https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/#download-section
		import inet.installer; 
		var downloadUrl = "https://go.microsoft.com/fwlink/?linkid=" +( _WIN_64 ? "2124701" : "2099617");
		
		if(!_WIN10_LATER){ 
			return;
		}
		 
		if( inet.installer.asInvoker("WebView2 Runtime", downloadUrl ," /silent /install",,winform
		) ){
			return !!getRuntimeInfo();
		} 	 
	}
	
	jsonTryParse = ..web.json.tryParse;
	
	if(!_WIN10_LATER) {
		return;
	}
	
	/*
	感谢：
	https://github.com/webview/webview/blob/master/webview.h
	https://github.com/MicrosoftEdge/WebView2Browser
	*/
	_dll = ..raw.loadDll( $"~\lib\web\view\.res\webview.dll",,"cdecl"); 
}

/**intellisense()
web.view = WebView2（Edge/Chromium内核）控件，\n可生成体积很小的独立 EXE 程序。\n\nWebView2 支持 Win10 以及之后的系统。\nWin11 已自带 WebView2，Win10 1803 以及之后的系统也已经自动推送 WebView2。\n因为 Win10 会自动更新，版本小于 1803 的 Win10 数量极少，可以忽略不计。\n其他检测到未安装 WebView2 的系统 —— aardio 会自动安装（不需要写任何代码）
web.view( = 创建 WebView2（Edge/Chromium内核） 浏览器控件。\n\n此对象支持多线程界面回调，可传入工作线程使用
web.view(.(winform,userDataDir,browserArguments,->->->) = 创建浏览器控件，\n参数 @winform 指定嵌入网页的宿主窗口，\n└── @winform 可指定窗体对象或 static,custom 等控件对象。└── 不指定 @winform 则自动创建 messageOnly 隐藏窗口。\n可选用参数 @userDataDir 参数自定义用户数据目录，\n可选用参数 @browserArguments 传入一个命令行参数表或多个非 null 命令行参数。\n所有命令行参数调用 string.args.joinEx 合成为 WebView2 的启动参数。\n表参数中的驼峰参数名自动转为连字符风格并加 -- 前缀。\n其他规则请参考原码与 string.args.joinEx 说明。\n└── 例如修改 UA：`--user-agent="Mozilla/5.0 aardio"` \n└──例如切换语言：`--accept-lang=zh-CN`\n[└──更多参数：](https://peter.sh/experiments/chromium-command-line-switches)\n参数 @browserArguments 也可用数值指定要启动的远程调试端口，\n└── 调试端口为 0 则自动分配空闲端口，\n└── 同一用户数据目录不能同时使用远程调试与内置 CDP 接口\n如果未指定 @browserArguments，则取 web.view.browserArguments 设为默认启动参数。\n@browserArguments 之后的参数仍会合成到启动参数内
web.view(.(winform,createBrowserOptions) = @.view(winform,{\n	extensions = true;\n	language =  "zh-CN";\n	startArguments = {acceptLang = "zh-CN" };\n	__/*extensions 是否启用浏览器扩展，启用后可调用 loadExtension 函数加载扩展。\nuserDataDir 一般可省略，不同的 userDataDir 创建不同的会话。\n\nlanguage 指定浏览器界面语言，也影响 --accept--lang 参数的值。\n一般自动指定为系统语言，可省略。\n\nstartArguments 指定浏览器启动参数，\n可以是 string.args 兼容的字符串、表对象都可以。\n\ncompatibleBrowserVersion 指定最低兼容的浏览器版本，可省略。\n*/})
web.view() = !stdWebView2.
web.view.getRuntimeInfo() = 获取 WebView2 Runtime 安装信息\n未安装返回 null
web.view.checkRuntime(.(winform) = 如果未安装 WebView2 Runtime 就自动下载安装
web.view.installRuntime(.(winform) = 重装 WebView2 Runtime
web.view.browserArguments = 用于指定默认的浏览器启动参数。\n可以指定一个 string.args.joinEx 支持的命令行参数表或字符串。\n也可以指定一个可以返回上述参数的函数。
end intellisense**/

/****intellisense(!stdWebView2) 
go( = 打开网址或文件地址。\n如果需要用这个函数打开工程内的资源文件，\n请提前导入 wsock.tcp.simpleHttpServer 或 wsock.tcp.asynHttpServer 。\n\n如果要在打开的网页上跳转锚点（也就是跳转 # 开头的网址），\n可改用 location 属性跳转
go(.(url,devPort,devTimeout) = 打开 @url 参数指定的网址。\n\n如果提前导入 wsock.tcp.simpleHttpServer 或 wsock.tcp.asynHttpServer \n则 io.localpath 支持的路径转换为通过嵌入 HTTP 服务器访问的网址。\n\n使用 HTTP 嵌入服务器可自动支持嵌入资源路径与 SPA 单页应用。\n如果同时文件名为 index.html 或 index.aardio。\n则上级目录设为 documentBase 根目录，后续请求路径应当以 "/" 代替 documentBase。\n\n可选使用@devPort参数指定前端项目开发环境调试端口，\n可选用@devTimeout参数指定检测调试端口超时\n@devPort,@devTimeout参数仅在开发环境中有效
preloadScript(__/*JS 脚本*/) = 将 字符串参数@1 指定的 JS 脚本添加为网页默认加载脚本,\n在网页初始化时执行，保证在 window.onload 事件前执行,\n不会覆盖之前添加的脚本
doScript(__/*JS 脚本*/) = 执行 字符串参数@1 指定的 JS 脚本
html = @.html = /**\n<!doctype html>\n<html>\n<head>\n    <meta charset="utf-8">\n    <style type="text/css">\n    html,body{ height:100%; margin:0; } __/*将网页写入内存。\n支持 aardio 模板语法，模板的 owner 参数为当前 web.view 对象。\n包含 HTML 的块注释可赋值为字符串，首尾星号数目要一致。\n\nWebView2 通过 html 属性内存加载体积太大的 HTML 会卡住，改用本地文件可流畅打开。\n如果要引用其他本地文件，也必须改用 wb.go 打开 html 文件。*/\n    </style>\n    <script></script>\n</head>\n<body></body>\n</html>\n**/
export( = 导出 aardio 函数为 JS 全局变量。\n注意 JS 调用这里导出的本地函数时，\n调用参数会通过 JSON 转换为纯 aardio 对象。\n返回值也会通过 JSON 转换为纯 JS 对象。\n\n在被网页回调 aardio 函数内执行 JS 时要避免在 JS 中再次回调此 aardio 函数。\n\n被网页回调的 aardio 函数内不要调用可能阻塞的 webView.xcall，webView.eval 函数。\n应改用非阻塞的 webView.invoke 函数，或通过 winform.setTimeout 异步调用会导致同步阻塞的函数。
export(.(JS变量名,回调函数) = 导出aardio函数为JS全局变量,\n参数也可以使用一个表包含多个需要绑定到JS的变量名值对,值必须是函数。\nJS脚本中调用这里绑定的本地函数返回值为 Promise 对象
exportHostObject( = 直接导出 aardio 对象到 JavaScript，\n直接转换为 COM 对象，中间不需要经过 JSON 转换,\n用法请参考: https://docs.microsoft.com/en-us/microsoft-edge/webview2/reference/win32/icorewebview2?view=webview2-1.0.705.50#addhostobjecttoscript
exportHostObject(.(变量名,对象) = 直接导出 aardio 对象到 JavaScript，\n可导出表对象、函数对象、COM 对象等,\n在js中通过 chrome.webview.hostObjects的成员访问此对象,\n中间不会经过JSON转换，而是直接转换为 COM 对象，\n用这个方法导出函数时，\n要特别注意参数中的 JavaScript 对象会被转换为 COM 对象，\n而返回给 JavaScript 的 aardio 对象会被转换为 Promise 对象
doScript(.(js) = 执行JS代码，\n不指定回调函数时，JS代码放入匿名函数体内执行
doScript(.(js,callback) = @.doScript(js,function(result){\n	__/*执行JS代码成功在当前界面线程异步回调此函数，\n@result参数为JS代码的返回值*/\n} )
eval( = 运算 JS 代码并返回值\n返回值使用 JSON 转换为 aardio 值。\n此函数会阻塞直到调用返回。\n在被网页回调 aardio 函数内调用 webView.xcall，webView.eval 可能导致阻塞，\n应改用非阻塞的 webView.invoke 函数，或用 winform.setTimeout 异步调用 webView.xcall，webView.eval 函数
eval(.(js,->->->) = 运算JS代码并返回值，\n等待返回值过程中会继续处理界面消息,\n如果指定多个参数，则首先调用 string.format 格式化所有参数
xcall( = 调用JS函数并返回值。\n此函数使用 JSON 在 JS/aardio 之间转换参数与返回值\n\n此函数会阻塞直到调用返回。\n如果不需要返回值建议改用异步非阻塞的 webView.invoke 函数。\n在被网页回调 aardio 函数内调用 webView.xcall，webView.eval 可能导致阻塞，\n应改用非阻塞的 webView.invoke 函数，或用 winform.setTimeout 异步调用 webView.xcall，webView.eval 函数
xcall(.("object->func",->->->) = 调用 JS 函数并返回值，\n此函数使用 JSON 在 JS/aardio 之间转换参数与返回值。\n\n等待返回值过程中会继续处理界面消息,\n参数@!指定要调用的函数名或返回函数的表达式,\n\n如果参数 @1 不包含回车或换换行、分号、大括号、圆括号，\n则参数 @1最后一个点号前的对象作为调用 JS 函数的 this 参数
invoke( = 调用 JS 函数但不会等待返回值。\n\n此函数使用 JSON 在 JS/aardio 之间转换参数与返回值
invoke(.("object->func",->->->) = 调用 JS 函数但不会等待返回值，\n等待返回值过程中会继续处理界面消息。\n\n参数 @1 指定要调用的函数名或返回函数的表达式,\n\n如果参数 @1 不包含回车或换换行、分号、大括号、圆括号，\n则参数 @1最后一个点号前的对象作为调用 JS 函数的 this 参数
cdp( = 调用 WebView2 内置 CDP（Chrome DevTools Protocol） 接口。\n调用内置 CDP（Chrome DevTools Protocol）接口，多个 WebView2 不会冲突。\n但同一用户数据目录不能在使用内置 CDP 接口的同时开放远程调试端口。\n\n\nCDP 文档: https://chromedevtools.github.io/devtools-protocol \n使用范例: doc://example/WebUI/web.view/DevTools/cdp.html
cdp(.(method,params) = 调用 WebView2 内置 CDP 接口。\n参数 @method 指定 CDP 方法，例如："Page.navigate" 。\n参数 @param 用一个表对象，或 JSON 字符串指定调用参数。\n成功返回一个表对象，失败返回 null，错误代码。\n错误代码可用 lasterr 函数转换为错误信息。
cdp(.(method,params,callback) = 异步调用 WebView2 内置 CDP 接口。\n不等待 CDP 调用完成，而是在调用完成异步回调 callback 函数。\n参数 @method 指定 CDP 方法，例如："Page.navigate" 。\n参数 @param 用一个表对象，或 JSON 字符串指定调用参数。\n@callback 指定回调函数，\n回调参数@1为 CDP 返回的表对象，回调参数@2 为错误代码。\n成功返回 true，失败返回 null,错误代码
cdpWait(.(method,params,timeout) = 调用 WebView2 内置 CDP 接口并等待返回非 null 值。\n参数 @method 指定 CDP 方法，例如："DOM.getDocument" 。\n参数 @param 用一个表对象，或 JSON 字符串指定调用参数。\n可选用 @timeout 指定超时，单位毫秒，默认在窗口关闭前一直等待。\n成功返回一个表对象，失败返回 null,错误代码。\n超时错误代码为 0x102/*_WAIT_TIMEOUT*/。\n错误代码可用 lasterr 函数转换为错误信息。
cdpWait( = 调用 WebView2 内置 CDP 接口并等待返回非 null 值。\n调用内置 CDP（Chrome DevTools Protocol）接口，多个 WebView2 不会冲突。\n但同一用户数据目录不能在使用内置 CDP 接口的同时开放远程调试端口。\n函数执行成功返回一个表对象，失败返回 null,错误代码。\n错误代码可用 lasterr 函数转换为错误信息。
cdpQuery( = 使用 WebView2 内置 CDP 接口查询 DOM 节点。\n成功返回表对象，失败返回 null，错误代码。\n错误代码可用 lasterr 函数转换为错误信息。\n\n此函数调用内置 CDP（Chrome DevTools Protocol）接口，多个 WebView2 不会冲突。\n但同一用户数据目录不能在使用内置 CDP 接口的同时开放远程调试端口
cdpQuery(.(selector,parent) = 使用 WebView2 内置 CDP 接口查询节点。\n@selector 指定 CSS 选择器，\n@parent 可选指定父节点或父节点的 nodeId。\n不指定父节点则 @parent 默认取页面根节点。
cdpQuery(.(selector,parent,callback) = 异步调用 WebView2 内置 CDP 接口查询节点。\n不等待 CDP 调用完成，而是在调用完成异步回调 callback 函数。\n@selector 指定 CSS 选择器，\n@parent 可选指定父节点或父节点的 nodeId。\n不指定父节点则 @parent 默认取页面根节点。\n@callback 指定回调函数，\n回调参数@1为 CDP 返回的表对象，回调参数@2 为错误代码。\n成功返回 true，失败返回 null,错误代码
cdpWaitQuery( = 使用 WebView2 内置 CDP 接口查询并等待 DOM 节点。\n调用内置 CDP（Chrome DevTools Protocol）接口，多个 WebView2 不会冲突。\n但同一用户数据目录不能在使用内置 CDP 接口的同时开放远程调试端口
cdpWaitQuery(.(selector,parent,timeout) = 使用 WebView2 内置 CDP 接口接口查询并等待节点，\n@selector 指定 CSS 选择器，\n@parent 可选指定父节点或父节点的 nodeId。\n不指定父节点则 @parent 默认取页面根节点。\n可选用 @timeout 指定超时，单位毫秒，默认在窗口关闭前一直等待。\n成功返回表对象，失败返回 null,错误代码。\n超时错误代码为 0x102/*_WAIT_TIMEOUT*/
waitEle( = 等待网页创建指定节点
waitEle(.(selector) = 等待网页创建指定节点\n@selector 参数指定CSS选择器,\n省略参数@2时同步等待节点出现。\n\n成功返回 CSS 选择器，失败返回 null,错误对象（表对象或字符串）
waitEle(.(selector,callback,timeout) = 异步等待网页创建指定节点\n@selector 参数指定CSS选择器,\n参数@2指定 aardio 回调函数,\n找到节点回调参数@1为选择器，\n失败回调参数@2为错误信息,回调参数@1为null,\n可选用参数@3指定超时，单位毫秒
waitEle(.(selector,js,timeout) = 异步等待网页创建指定节点\n@selector 参数指定CSS选择器,\n找到节点执行参数@2指定的 JavaScript 代码,\n执行JS代码时自动绑定this对象为找到的节点,\n可选用参数@3指定超时，单位毫秒
adjust() = 调整页面大小到适合窗口
external = @.external = {
	__/*在 Javascript 中可通过全局变量 `aardio` 访问 ??.external 对象。
在 JavaScript 中所有的 aardio 对象以及 aardio 对象的方法与属性都被包装为 Promise 对象

在 JavaScript 中调用  ??.external 导出的函数时，参数与返回值都不需要经过 JSON 转换。
除字符串、数值、布尔值、可兼容的数组、buffer 等基础值类型可以直接传值以外，
其他对象类型（JavaScript 中的 object 或 aardio 中的表对象 ）自动转换为 COM 代理对象，
让我们可以通过 COM 接口间接操作跨语言的对象。

要注意不能将这种 COM 代理对象作为原生 JavaScript 对象使用，
例如不能用于 JavaScript 图表或表格的数据源对象，而  ??.export 导出的 aardio 函数则无此限制。
 
被网页回调的 aardio 函数内不要调用可能阻塞的 webView.xcall，webView.eval 函数。
应改用非阻塞的 webView.invoke 函数，或通过 winform.setTimeout 异步调用同步阻塞的函数*/
}
onFullScreen = @.onFullScreen = lambda(enabled) owner.fullscreen(enabled);__/*响应网页全屏事件，\n参数 enabled 表示网页是否请求全屏，此函数忽略返回值。\n设为 null 移除事件*/
fullscreen(__) = 全屏。\n参数指定是否全屏，不指定参数则切换全屏。\n返回值为当前是否全屏
isVisible = 浏览器控件是否显示
defaultBackgroundColor =  网页默认背景色, GDI+ 兼容的 ARGB 格式数值\n颜色透明度仅支持透明或不透明
notifyPositionChanged() = 通知 WebView2 控件父窗口已移动
enableStatusBar(__) = 是否允许在网页窗口底部显示默认状态栏，默认不显示。\n参数 @1 可指定 true 或 false
enableDevTools(__) = 设置是否启用网页开发工具。\n参数 @1 可指定 true 或 false 。\n必须在加载网页前设置
enableDefaultContextMenus(__) = 设置是否启用默认右键菜单。\n参数 @1 可指定 true 或 false 。\n必须在加载网页前设置
loadExtension(__) =  加载浏览器扩展目录。\n参数 @1 必须指定浏览器扩展配置文件 manifest.json 所在的目录。\n\n如果事先导入 chrome.extensions 库，\n则参数可指定系统浏览器扩展 ID、或名称、描述包含的关键字（忽略大小写）。\n在浏览器扩展管理页面可查看 ID。
_form = 创建浏览器控件传入的窗口对象\n!static.
userDataDir = 创建浏览器控件指定的浏览器用户数据目录\n如果该目录下数据异常会导致浏览器异常组件并显示空白，\n此时关闭程序并清空或更新用户数据目录即可
wait("__") = 等待参数@1指定的网址打开，\n参数@2支持模式匹配语法，\n在指定的网页创建 document 对象后返回，\n窗口关闭也会返回。\n\n成功返回页面 URL
waitUrlParam("__","") = 等待参数@1指定的网址打开，支持模式匹配。\n参数 @1 的等待规则与 wait 函数相同。\n\n参数 @2 指定要等待的 URL 参数名，\n如果找到该参数则返回参数值，否则继续等待到参数出现或社会窗口关闭
waitDoc() = 等待文档对象准备就绪。\n也就是页面的 document.readyState 为 "interactive" 时返回 true。\n如果参数 @1 为 true 则  document.readyState 为 "complete" 时返回 true。\n可选用参数 @2 指定超时。
onDocumentInit(url) = @.onDocumentInit = function(url){
	__/*打开网页并创建 document 对象后触发此事件,\nurl为当前网址*/
}
location = 获取或设置当前网址。\n可以用于跳转锚点（也就是指定#开头的网址)。\n如果当前已经打开其他网页，则修改 location.href 跳转。\n否则调用 go 函数跳转
remoteDebuggingPort = 远程调试端口,只读属性
openRemoteDebugging() = 创建 web.socket.chrome 远程调试对象,\n请先导入web.socket.chrome\n!stdwebsocketchromeClient.
focus() = 网页窗口设置为输入焦点
hwndChrome = 网页窗口句柄
cdpSubscribe( = 订阅 CDP 事件
cdpSubscribe(.(事件名,回调函数) = 回调函数的参数为参数表对象。\n如果回调函数返回一个函数，则先结束事件，然后异步执行该函数。\n调用此函数总是会取消之前订阅的同名事件。\n如果回调函数为 null，则仅取消订阅
onNewWindow(callback) = @.onNewWindow = function(url){\n	__/*返回 false 继续打开新窗口。\n返回 true 阻止打开新窗口。\n返回函数则阻止打开新窗口，并异步执行该函数。\n耗时或阻塞浏览器控件的操作应放入返回的异步函数内执行*/\n}
setTimeout( = 推迟执行指定的函数或代码。\n此函数异步执行参数中指定的函数，不会阻塞当前代码继续执行。\n\n网页回调 aardio 函数时，\n如果要使用 webView.eval, webView.xcall 等阻塞调用网页的函数，\n应通过 setTimeout 函数异步调用
setTimeout(.(函数或代码,延时,其他附加参数) = 延时参数是可选参数，以毫秒为单位，默认为0毫秒。\n可选用附加参数指定调用延时函数的实参。\n返回值为定时器 ID
end intellisense****/

/**details(必读)
web.view 基于微软 WebView2（Edge/Chromium内核），
WebView2 稳定可靠、性能强悍、接口简洁，可生成体积很小的独立 EXE 程序。

WebView2 支持 Win10 以及之后的系统。
Win11 已自带 WebView2，Win10 1803 以及之后的系统早已自动推送 WebView2。

实际上现在 WebView2 已经是无法卸载的系统级组件。
没有自带 WebView2 的旧系统已经非常罕见，可以忽略不记。

只要简洁，不求完美！
Win7 在市场上已经接近消失，现在开发软件再处处考虑 Win7 兼容是不必要的。
web.view 支持库不再支持 Win7，可通过 web.view.7 扩展库导入兼容 Win7 的旧版 web.view 。 

在网页上点右键菜单项<b>（Inspect / 检查）</b>或按 F12 键可以打开网页开发工具（ DevTools ），
在开发工具的「设置 / 语言」<b>（Settings / Language」）</b>界面可切换开发工具的界面语言。
在 DevTools <b>控制台（Console）</b>可查看程序错误信息。<br>
end details**/