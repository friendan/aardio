import process.apiHook;
import process.job.limitKill;

namespace process;

class ruffle{
	ctor( winform ){
		if(!winform._parentForm) error("参数@1 请指定子窗口控件对象",2); 
		
		if( winform.isForm ? winform.onEraseBkgnd === null ) winform.onEraseBkgnd  = lambda() 0;  
		else winform.modifyStyle(0x20/*_WS_EX_TRANSPARENT*/,0x2000000/*_WS_CLIPCHILDREN*/); 
		
		winform.text = "";
		this._form = winform;
	};
	go = function(swfPath){
		 
		var x,y,cx,cy = this._form.getPos();
		
		var args = ..table.assign({"--no-gui","--dummy-external-interface","--width","0","--height","0"}, 
			this.arguments );
			
		for k,v in ..table.eachName(this.flashVars){
			..table.push(args, "-P"+k+"="+tostring(v));
		}
		
		for k,v in ..table.eachName(this.gamepadButton){
			..table.push(args, "-B",k+"="+tostring(v));
		}
		 
		if(this.proxy){
			..table.push(args, "--proxy",this.proxy);	
		}
		
		..table.push(args, "--base",..io.fullpath(this.base||"/"));
		
		//ruffle.exe --help 查看启动参数用法
		if(this.quality) ..table.push(args, "--quality",this.quality); 
		if(this.scale) ..table.push(args, "--scale",this.scale); 
		if(this.forceScale) ..table.push(args, "--force-scale");
		if(this.volume!==null) ..table.push(args, "--volume",this.volume);
		if(this.savDirectory ) ..table.push(args, "--save-directory",..io.fullpath(this.savDirectory));
		if(this.config ) ..table.push(args, "--config",..io.fullpath(this.config));
		if(this.socketAllow) ..table.push(args, "--socket-allow",this.socketAllow);
		if(this.tcpConnections) ..table.push(args, "--tcp-connections",this.tcpConnections);
		if(this.upgradeToHttps) ..table.push(args, "--upgrade-to-https");
		if(this.align) ..table.push(args, "--align",this.align);
		if(this.forceAlign) ..table.push(args, "--force-align");
		if(this.loadBehavior) ..table.push(args, "--load-behavior",this.loadBehavior);
		if(this.letterbox)..table.push(args, "--letterbox",this.letterbox);
		if(this.openUrlMode )..table.push(args, "--open-url-mode",this.openUrlMode);
		
		if(..io.localpath(swfPath)){ 
				
			if(..wsock[["tcp"]][["asynHttpServer"]]){
				if(!this.asynHttpServer){
					this.asynHttpServer = ..wsock.tcp.asynHttpServer();
					this.asynHttpServer.start("127.0.0.1");
				}
				
				swfPath = this.asynHttpServer.getUrl(swfPath);
			}
			elseif(..wsock[["tcp"]][["simpleHttpServer"]]){
				swfPath = ..wsock.tcp.simpleHttpServer.startUrl(swfPath);
			}
			else{
				swfPath = ..io.exist(swfPath) || swfPath;
			} 
		}
		else {
			swfPath = ..io.exist(swfPath) || swfPath;
		} 
		
		..table.push(args,swfPath);	
		
		var err;
		this.apiHook,err  = ..process.apiHook(exePath,args,{
			suspended = true;//启动后暂停 
			workDir = ..io.fullpath(this.workDir || "/")
		});
		if(!this.apiHook) error(err,2);
		this.process = this.apiHook.process;
 		::User32.AttachThreadInput( this.process.tid,..thread.getId(),true);
 		
 		//安装 HOOK
		this.hookCreateWindowEx = this.apiHook.install("User32.dll"
			,"CreateWindowExW","CreateWindowExHook.dll","_CreateWindowExHook@48");
			
		this.hookSetWindowPos = this.apiHook.install("User32.dll"
			,"SetWindowPos","CreateWindowExHook.dll","_hookSetWindowPos@28");
		
		//调用外部进程中的 API 函数
		var hookSet = this.process.remoteApi("void(addr pc,addr ps,addr hwndHost)"
			,"CreateWindowExHook.dll","hookSet","cdecl");
			
		hookSet(
			this.hookCreateWindowEx.addrTrampoline,//这是原来的 CreateWindowEx 函数指针地址 
			this.hookSetWindowPos.addrTrampoline,//这是原来的 SetWindowPos 函数指针地址 
			this._form.hwnd
		);	

	    this.process.resume();
		this.process.assignToJobObject(..process.job.limitKill); 
		
		if(this.hwndFlash) ..win.close(this.hwndFlash);
		this.hwndFlash = this.process.waitMainWindow("Window Class"); 
		this.hwndEventTarget = this.process.waitMainWindow("Winit Thread Event Target");
		
		if(this.hwndFlash){   
			this._form.orphanWindow(,this.hwndFlash); 
			this._form.show();
		}
	};
}

namespace ruffle{ 
	
    exePath = ..io.appData("aardio/ruffle/2024.3.27.ruffle.dll",$"~\lib\process\ruffle\.res\ruffle.dll") // https://ruffle.rs/#downloads
	..io.appData("aardio/ruffle/CreateWindowExHook.dll",$"~\lib\process\ruffle\.res\CreateWindowExHook.dll")	
}  

/**intellisense()
process.ruffle = 开源 Flash 控件 Ruffle
process.ruffle( = 创建 Ruffle 控件\n建议在显示窗口以后再创建此对象
process.ruffle(.(ctrl) = 创建 Ruffle 控件\n参数@1 可用控件对象指定宿主窗口
process.ruffle() = !processRuffle.
end intellisense**/

/**intellisense(!processRuffle)
go(__) = 打开 swf 动画,\n参数 @1 指定 swf 文件地址或网址。\n如果提前导入 wsock.tcp.asynHttpServer 或  wsock.tcp.asynHttpServer\n则可支持资源文件路径。\n\n改用标准库中的 web.view + 扩展库 web.ruffle 效果更好一些,\n参考 web.ruffle 范例。\n也可以用扩展库 web.kit.flash 播放 Flash。
flashVars = 可选使用此属性指定 flashVars 参数,\n参数值应当是一个表，表中键名应为字符串
proxy = 代理服务器地址
volume = 用 0 到 1 的值设置音量，默认为 1，0 为静音
letterbox = 设置如何填充动画区域之外的背景，默认值为 on，设为 off 不填充
arguments = 可选用一个字符串数组指定 ruffle 启动参数
end intellisense**/

